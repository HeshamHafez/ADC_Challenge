
ADC_challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000022e6  0000237a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080007c  0080007c  00002396  2**0
                  ALLOC
  3 .stab         00001bfc  00000000  00000000  00002398  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e85  00000000  00000000  00003f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000050c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000089ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009567  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 10 	call	0x219a	; 0x219a <main>
      8a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 05 11 	jmp	0x220a	; 0x220a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 21 11 	jmp	0x2242	; 0x2242 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_16>:
#include "ADC.h"

volatile uint16 g_adcResult = 0;

ISR(ADC_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	8f 93       	push	r24
     b52:	9f 93       	push	r25
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
	g_adcResult = ADC;
     b60:	e4 e2       	ldi	r30, 0x24	; 36
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	91 81       	ldd	r25, Z+1	; 0x01
     b68:	90 93 7d 00 	sts	0x007D, r25
     b6c:	80 93 7c 00 	sts	0x007C, r24

}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	ff 91       	pop	r31
     b76:	ef 91       	pop	r30
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	0f 90       	pop	r0
     b82:	1f 90       	pop	r1
     b84:	18 95       	reti

00000b86 <ADC_Init>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void ADC_Init(void)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	2c 97       	sbiw	r28, 0x0c	; 12
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
	switch(ADC_Config.Reference)
     b9a:	80 91 75 00 	lds	r24, 0x0075
     b9e:	28 2f       	mov	r18, r24
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	3c 87       	std	Y+12, r19	; 0x0c
     ba4:	2b 87       	std	Y+11, r18	; 0x0b
     ba6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ba8:	9c 85       	ldd	r25, Y+12	; 0x0c
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	91 05       	cpc	r25, r1
     bae:	c1 f0       	breq	.+48     	; 0xbe0 <ADC_Init+0x5a>
     bb0:	2b 85       	ldd	r18, Y+11	; 0x0b
     bb2:	3c 85       	ldd	r19, Y+12	; 0x0c
     bb4:	22 30       	cpi	r18, 0x02	; 2
     bb6:	31 05       	cpc	r19, r1
     bb8:	11 f1       	breq	.+68     	; 0xbfe <ADC_Init+0x78>
     bba:	8b 85       	ldd	r24, Y+11	; 0x0b
     bbc:	9c 85       	ldd	r25, Y+12	; 0x0c
     bbe:	00 97       	sbiw	r24, 0x00	; 0
     bc0:	69 f5       	brne	.+90     	; 0xc1c <ADC_Init+0x96>
	{
	case AREF_INTERNAL_VREF_OFF:
		CLEAR_BIT(ADC_ADMUX,ADC_REFS1);
     bc2:	a7 e2       	ldi	r26, 0x27	; 39
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e2       	ldi	r30, 0x27	; 39
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	8f 77       	andi	r24, 0x7F	; 127
     bce:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_REFS0);
     bd0:	a7 e2       	ldi	r26, 0x27	; 39
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e7 e2       	ldi	r30, 0x27	; 39
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8f 7b       	andi	r24, 0xBF	; 191
     bdc:	8c 93       	st	X, r24
     bde:	2c c0       	rjmp	.+88     	; 0xc38 <ADC_Init+0xb2>
		break;
	case AVCC:
		CLEAR_BIT(ADC_ADMUX,ADC_REFS1);
     be0:	a7 e2       	ldi	r26, 0x27	; 39
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e7 e2       	ldi	r30, 0x27	; 39
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8f 77       	andi	r24, 0x7F	; 127
     bec:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_REFS0);
     bee:	a7 e2       	ldi	r26, 0x27	; 39
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e7 e2       	ldi	r30, 0x27	; 39
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	80 64       	ori	r24, 0x40	; 64
     bfa:	8c 93       	st	X, r24
     bfc:	1d c0       	rjmp	.+58     	; 0xc38 <ADC_Init+0xb2>
		break;
	case INTERNAL_VREF:
		SET_BIT(ADC_ADMUX,ADC_REFS1);
     bfe:	a7 e2       	ldi	r26, 0x27	; 39
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e2       	ldi	r30, 0x27	; 39
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	80 68       	ori	r24, 0x80	; 128
     c0a:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_REFS0);
     c0c:	a7 e2       	ldi	r26, 0x27	; 39
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e2       	ldi	r30, 0x27	; 39
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	80 64       	ori	r24, 0x40	; 64
     c18:	8c 93       	st	X, r24
     c1a:	0e c0       	rjmp	.+28     	; 0xc38 <ADC_Init+0xb2>
		break;
	default:
		CLEAR_BIT(ADC_ADMUX,ADC_REFS1);
     c1c:	a7 e2       	ldi	r26, 0x27	; 39
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e7 e2       	ldi	r30, 0x27	; 39
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	8f 77       	andi	r24, 0x7F	; 127
     c28:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_REFS0);
     c2a:	a7 e2       	ldi	r26, 0x27	; 39
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e7 e2       	ldi	r30, 0x27	; 39
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	8f 7b       	andi	r24, 0xBF	; 191
     c36:	8c 93       	st	X, r24
		break;
	}

	switch(ADC_Config.Adjustment)
     c38:	80 91 76 00 	lds	r24, 0x0076
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	3a 87       	std	Y+10, r19	; 0x0a
     c42:	29 87       	std	Y+9, r18	; 0x09
     c44:	89 85       	ldd	r24, Y+9	; 0x09
     c46:	9a 85       	ldd	r25, Y+10	; 0x0a
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	31 f0       	breq	.+12     	; 0xc58 <ADC_Init+0xd2>
     c4c:	29 85       	ldd	r18, Y+9	; 0x09
     c4e:	3a 85       	ldd	r19, Y+10	; 0x0a
     c50:	21 30       	cpi	r18, 0x01	; 1
     c52:	31 05       	cpc	r19, r1
     c54:	49 f0       	breq	.+18     	; 0xc68 <ADC_Init+0xe2>
     c56:	10 c0       	rjmp	.+32     	; 0xc78 <ADC_Init+0xf2>
	{
	case RIGHT_ADJUSTMENT:
		CLEAR_BIT(ADC_ADMUX,ADC_ADLAR);
     c58:	a7 e2       	ldi	r26, 0x27	; 39
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e7 e2       	ldi	r30, 0x27	; 39
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	8f 7d       	andi	r24, 0xDF	; 223
     c64:	8c 93       	st	X, r24
     c66:	0f c0       	rjmp	.+30     	; 0xc86 <ADC_Init+0x100>
		break;
	case LEFT_ADJUSTMENT:
		SET_BIT(ADC_ADMUX,ADC_ADLAR);
     c68:	a7 e2       	ldi	r26, 0x27	; 39
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e7 e2       	ldi	r30, 0x27	; 39
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	80 62       	ori	r24, 0x20	; 32
     c74:	8c 93       	st	X, r24
     c76:	07 c0       	rjmp	.+14     	; 0xc86 <ADC_Init+0x100>
		break;
	default:
		CLEAR_BIT(ADC_ADMUX,ADC_ADLAR);
     c78:	a7 e2       	ldi	r26, 0x27	; 39
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e7 e2       	ldi	r30, 0x27	; 39
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8f 7d       	andi	r24, 0xDF	; 223
     c84:	8c 93       	st	X, r24
		break;
	}

	switch(ADC_Config.Channel)
     c86:	80 91 77 00 	lds	r24, 0x0077
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	38 87       	std	Y+8, r19	; 0x08
     c90:	2f 83       	std	Y+7, r18	; 0x07
     c92:	8f 81       	ldd	r24, Y+7	; 0x07
     c94:	98 85       	ldd	r25, Y+8	; 0x08
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	91 05       	cpc	r25, r1
     c9a:	09 f4       	brne	.+2      	; 0xc9e <ADC_Init+0x118>
     c9c:	9b c0       	rjmp	.+310    	; 0xdd4 <ADC_Init+0x24e>
     c9e:	2f 81       	ldd	r18, Y+7	; 0x07
     ca0:	38 85       	ldd	r19, Y+8	; 0x08
     ca2:	24 30       	cpi	r18, 0x04	; 4
     ca4:	31 05       	cpc	r19, r1
     ca6:	8c f4       	brge	.+34     	; 0xcca <ADC_Init+0x144>
     ca8:	8f 81       	ldd	r24, Y+7	; 0x07
     caa:	98 85       	ldd	r25, Y+8	; 0x08
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	91 05       	cpc	r25, r1
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <ADC_Init+0x12e>
     cb2:	48 c0       	rjmp	.+144    	; 0xd44 <ADC_Init+0x1be>
     cb4:	2f 81       	ldd	r18, Y+7	; 0x07
     cb6:	38 85       	ldd	r19, Y+8	; 0x08
     cb8:	22 30       	cpi	r18, 0x02	; 2
     cba:	31 05       	cpc	r19, r1
     cbc:	0c f0       	brlt	.+2      	; 0xcc0 <ADC_Init+0x13a>
     cbe:	66 c0       	rjmp	.+204    	; 0xd8c <ADC_Init+0x206>
     cc0:	8f 81       	ldd	r24, Y+7	; 0x07
     cc2:	98 85       	ldd	r25, Y+8	; 0x08
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	d1 f0       	breq	.+52     	; 0xcfc <ADC_Init+0x176>
     cc8:	38 c1       	rjmp	.+624    	; 0xf3a <ADC_Init+0x3b4>
     cca:	2f 81       	ldd	r18, Y+7	; 0x07
     ccc:	38 85       	ldd	r19, Y+8	; 0x08
     cce:	25 30       	cpi	r18, 0x05	; 5
     cd0:	31 05       	cpc	r19, r1
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <ADC_Init+0x150>
     cd4:	c7 c0       	rjmp	.+398    	; 0xe64 <ADC_Init+0x2de>
     cd6:	8f 81       	ldd	r24, Y+7	; 0x07
     cd8:	98 85       	ldd	r25, Y+8	; 0x08
     cda:	85 30       	cpi	r24, 0x05	; 5
     cdc:	91 05       	cpc	r25, r1
     cde:	0c f4       	brge	.+2      	; 0xce2 <ADC_Init+0x15c>
     ce0:	9d c0       	rjmp	.+314    	; 0xe1c <ADC_Init+0x296>
     ce2:	2f 81       	ldd	r18, Y+7	; 0x07
     ce4:	38 85       	ldd	r19, Y+8	; 0x08
     ce6:	26 30       	cpi	r18, 0x06	; 6
     ce8:	31 05       	cpc	r19, r1
     cea:	09 f4       	brne	.+2      	; 0xcee <ADC_Init+0x168>
     cec:	df c0       	rjmp	.+446    	; 0xeac <ADC_Init+0x326>
     cee:	8f 81       	ldd	r24, Y+7	; 0x07
     cf0:	98 85       	ldd	r25, Y+8	; 0x08
     cf2:	87 30       	cpi	r24, 0x07	; 7
     cf4:	91 05       	cpc	r25, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <ADC_Init+0x174>
     cf8:	fd c0       	rjmp	.+506    	; 0xef4 <ADC_Init+0x36e>
     cfa:	1f c1       	rjmp	.+574    	; 0xf3a <ADC_Init+0x3b4>
	{
	case ADC0:
		CLEAR_BIT(ADC_ADMUX,ADC_MUX4);
     cfc:	a7 e2       	ldi	r26, 0x27	; 39
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e7 e2       	ldi	r30, 0x27	; 39
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	8f 7e       	andi	r24, 0xEF	; 239
     d08:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX3);
     d0a:	a7 e2       	ldi	r26, 0x27	; 39
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e7 e2       	ldi	r30, 0x27	; 39
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	87 7f       	andi	r24, 0xF7	; 247
     d16:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX2);
     d18:	a7 e2       	ldi	r26, 0x27	; 39
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e7 e2       	ldi	r30, 0x27	; 39
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8b 7f       	andi	r24, 0xFB	; 251
     d24:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX1);
     d26:	a7 e2       	ldi	r26, 0x27	; 39
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e7 e2       	ldi	r30, 0x27	; 39
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	8d 7f       	andi	r24, 0xFD	; 253
     d32:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX0);
     d34:	a7 e2       	ldi	r26, 0x27	; 39
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e7 e2       	ldi	r30, 0x27	; 39
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8e 7f       	andi	r24, 0xFE	; 254
     d40:	8c 93       	st	X, r24
     d42:	fb c0       	rjmp	.+502    	; 0xf3a <ADC_Init+0x3b4>
		break;
	case ADC1:
		CLEAR_BIT(ADC_ADMUX,ADC_MUX4);
     d44:	a7 e2       	ldi	r26, 0x27	; 39
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e7 e2       	ldi	r30, 0x27	; 39
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8f 7e       	andi	r24, 0xEF	; 239
     d50:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX3);
     d52:	a7 e2       	ldi	r26, 0x27	; 39
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e7 e2       	ldi	r30, 0x27	; 39
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	87 7f       	andi	r24, 0xF7	; 247
     d5e:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX2);
     d60:	a7 e2       	ldi	r26, 0x27	; 39
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e7 e2       	ldi	r30, 0x27	; 39
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8b 7f       	andi	r24, 0xFB	; 251
     d6c:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX1);
     d6e:	a7 e2       	ldi	r26, 0x27	; 39
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e7 e2       	ldi	r30, 0x27	; 39
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	8d 7f       	andi	r24, 0xFD	; 253
     d7a:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_MUX0);
     d7c:	a7 e2       	ldi	r26, 0x27	; 39
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e7 e2       	ldi	r30, 0x27	; 39
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	81 60       	ori	r24, 0x01	; 1
     d88:	8c 93       	st	X, r24
     d8a:	d7 c0       	rjmp	.+430    	; 0xf3a <ADC_Init+0x3b4>
		break;
	case ADC2:
		CLEAR_BIT(ADC_ADMUX,ADC_MUX4);
     d8c:	a7 e2       	ldi	r26, 0x27	; 39
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e7 e2       	ldi	r30, 0x27	; 39
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8f 7e       	andi	r24, 0xEF	; 239
     d98:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX3);
     d9a:	a7 e2       	ldi	r26, 0x27	; 39
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e7 e2       	ldi	r30, 0x27	; 39
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	87 7f       	andi	r24, 0xF7	; 247
     da6:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX2);
     da8:	a7 e2       	ldi	r26, 0x27	; 39
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e7 e2       	ldi	r30, 0x27	; 39
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8b 7f       	andi	r24, 0xFB	; 251
     db4:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_MUX1);
     db6:	a7 e2       	ldi	r26, 0x27	; 39
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e7 e2       	ldi	r30, 0x27	; 39
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	82 60       	ori	r24, 0x02	; 2
     dc2:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX0);
     dc4:	a7 e2       	ldi	r26, 0x27	; 39
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e7 e2       	ldi	r30, 0x27	; 39
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	8e 7f       	andi	r24, 0xFE	; 254
     dd0:	8c 93       	st	X, r24
     dd2:	b3 c0       	rjmp	.+358    	; 0xf3a <ADC_Init+0x3b4>
		break;
	case ADC3:
		CLEAR_BIT(ADC_ADMUX,ADC_MUX4);
     dd4:	a7 e2       	ldi	r26, 0x27	; 39
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e7 e2       	ldi	r30, 0x27	; 39
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	8f 7e       	andi	r24, 0xEF	; 239
     de0:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX3);
     de2:	a7 e2       	ldi	r26, 0x27	; 39
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e7 e2       	ldi	r30, 0x27	; 39
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	87 7f       	andi	r24, 0xF7	; 247
     dee:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX2);
     df0:	a7 e2       	ldi	r26, 0x27	; 39
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e7 e2       	ldi	r30, 0x27	; 39
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8b 7f       	andi	r24, 0xFB	; 251
     dfc:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_MUX1);
     dfe:	a7 e2       	ldi	r26, 0x27	; 39
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e7 e2       	ldi	r30, 0x27	; 39
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	82 60       	ori	r24, 0x02	; 2
     e0a:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_MUX0);
     e0c:	a7 e2       	ldi	r26, 0x27	; 39
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e7 e2       	ldi	r30, 0x27	; 39
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	81 60       	ori	r24, 0x01	; 1
     e18:	8c 93       	st	X, r24
     e1a:	8f c0       	rjmp	.+286    	; 0xf3a <ADC_Init+0x3b4>
		break;
	case ADC4:
		CLEAR_BIT(ADC_ADMUX,ADC_MUX4);
     e1c:	a7 e2       	ldi	r26, 0x27	; 39
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e7 e2       	ldi	r30, 0x27	; 39
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	8f 7e       	andi	r24, 0xEF	; 239
     e28:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX3);
     e2a:	a7 e2       	ldi	r26, 0x27	; 39
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e7 e2       	ldi	r30, 0x27	; 39
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	87 7f       	andi	r24, 0xF7	; 247
     e36:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_MUX2);
     e38:	a7 e2       	ldi	r26, 0x27	; 39
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e7 e2       	ldi	r30, 0x27	; 39
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	84 60       	ori	r24, 0x04	; 4
     e44:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX1);
     e46:	a7 e2       	ldi	r26, 0x27	; 39
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e7 e2       	ldi	r30, 0x27	; 39
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	8d 7f       	andi	r24, 0xFD	; 253
     e52:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX0);
     e54:	a7 e2       	ldi	r26, 0x27	; 39
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e7 e2       	ldi	r30, 0x27	; 39
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	8e 7f       	andi	r24, 0xFE	; 254
     e60:	8c 93       	st	X, r24
     e62:	6b c0       	rjmp	.+214    	; 0xf3a <ADC_Init+0x3b4>
		break;
	case ADC5:
		CLEAR_BIT(ADC_ADMUX,ADC_MUX4);
     e64:	a7 e2       	ldi	r26, 0x27	; 39
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e7 e2       	ldi	r30, 0x27	; 39
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8f 7e       	andi	r24, 0xEF	; 239
     e70:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX3);
     e72:	a7 e2       	ldi	r26, 0x27	; 39
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e7 e2       	ldi	r30, 0x27	; 39
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	87 7f       	andi	r24, 0xF7	; 247
     e7e:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_MUX2);
     e80:	a7 e2       	ldi	r26, 0x27	; 39
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e7 e2       	ldi	r30, 0x27	; 39
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	84 60       	ori	r24, 0x04	; 4
     e8c:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX1);
     e8e:	a7 e2       	ldi	r26, 0x27	; 39
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e7 e2       	ldi	r30, 0x27	; 39
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8d 7f       	andi	r24, 0xFD	; 253
     e9a:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_MUX0);
     e9c:	a7 e2       	ldi	r26, 0x27	; 39
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e7 e2       	ldi	r30, 0x27	; 39
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	81 60       	ori	r24, 0x01	; 1
     ea8:	8c 93       	st	X, r24
     eaa:	47 c0       	rjmp	.+142    	; 0xf3a <ADC_Init+0x3b4>
		break;
	case ADC6:
		CLEAR_BIT(ADC_ADMUX,ADC_MUX4);
     eac:	a7 e2       	ldi	r26, 0x27	; 39
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e7 e2       	ldi	r30, 0x27	; 39
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8f 7e       	andi	r24, 0xEF	; 239
     eb8:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX3);
     eba:	a7 e2       	ldi	r26, 0x27	; 39
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e7 e2       	ldi	r30, 0x27	; 39
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	87 7f       	andi	r24, 0xF7	; 247
     ec6:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_MUX2);
     ec8:	a7 e2       	ldi	r26, 0x27	; 39
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e7 e2       	ldi	r30, 0x27	; 39
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	84 60       	ori	r24, 0x04	; 4
     ed4:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_MUX1);
     ed6:	a7 e2       	ldi	r26, 0x27	; 39
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e7 e2       	ldi	r30, 0x27	; 39
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	82 60       	ori	r24, 0x02	; 2
     ee2:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX0);
     ee4:	a7 e2       	ldi	r26, 0x27	; 39
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e2       	ldi	r30, 0x27	; 39
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8e 7f       	andi	r24, 0xFE	; 254
     ef0:	8c 93       	st	X, r24
     ef2:	23 c0       	rjmp	.+70     	; 0xf3a <ADC_Init+0x3b4>
		break;
	case ADC7:
		CLEAR_BIT(ADC_ADMUX,ADC_MUX4);
     ef4:	a7 e2       	ldi	r26, 0x27	; 39
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e7 e2       	ldi	r30, 0x27	; 39
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8f 7e       	andi	r24, 0xEF	; 239
     f00:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADMUX,ADC_MUX3);
     f02:	a7 e2       	ldi	r26, 0x27	; 39
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e7 e2       	ldi	r30, 0x27	; 39
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	87 7f       	andi	r24, 0xF7	; 247
     f0e:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_MUX2);
     f10:	a7 e2       	ldi	r26, 0x27	; 39
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e7 e2       	ldi	r30, 0x27	; 39
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	84 60       	ori	r24, 0x04	; 4
     f1c:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_MUX1);
     f1e:	a7 e2       	ldi	r26, 0x27	; 39
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e7 e2       	ldi	r30, 0x27	; 39
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	82 60       	ori	r24, 0x02	; 2
     f2a:	8c 93       	st	X, r24
		SET_BIT(ADC_ADMUX,ADC_MUX0);
     f2c:	a7 e2       	ldi	r26, 0x27	; 39
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e7 e2       	ldi	r30, 0x27	; 39
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	81 60       	ori	r24, 0x01	; 1
     f38:	8c 93       	st	X, r24
	default:
		/*Do Nothing*/
		break;
	}

	SET_BIT(ADC_ADCSRA,ADC_ADEN);
     f3a:	a6 e2       	ldi	r26, 0x26	; 38
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e6 e2       	ldi	r30, 0x26	; 38
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 68       	ori	r24, 0x80	; 128
     f46:	8c 93       	st	X, r24
	CLEAR_BIT(ADC_ADCSRA,ADC_ADSC);
     f48:	a6 e2       	ldi	r26, 0x26	; 38
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e6 e2       	ldi	r30, 0x26	; 38
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8f 7b       	andi	r24, 0xBF	; 191
     f54:	8c 93       	st	X, r24

	switch(ADC_Config.IntConfig)
     f56:	80 91 7a 00 	lds	r24, 0x007A
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	3e 83       	std	Y+6, r19	; 0x06
     f60:	2d 83       	std	Y+5, r18	; 0x05
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	31 f0       	breq	.+12     	; 0xf76 <ADC_Init+0x3f0>
     f6a:	2d 81       	ldd	r18, Y+5	; 0x05
     f6c:	3e 81       	ldd	r19, Y+6	; 0x06
     f6e:	21 30       	cpi	r18, 0x01	; 1
     f70:	31 05       	cpc	r19, r1
     f72:	49 f0       	breq	.+18     	; 0xf86 <ADC_Init+0x400>
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <ADC_Init+0x40e>
	{
	case ADC_INTERRUPT_DISABLE:
		CLEAR_BIT(ADC_ADCSRA,ADC_ADIE);
     f76:	a6 e2       	ldi	r26, 0x26	; 38
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e6 e2       	ldi	r30, 0x26	; 38
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	87 7f       	andi	r24, 0xF7	; 247
     f82:	8c 93       	st	X, r24
     f84:	07 c0       	rjmp	.+14     	; 0xf94 <ADC_Init+0x40e>
		break;
	case ADC_INTERRUPT_ENABLE:
		SET_BIT(ADC_ADCSRA,ADC_ADIE);
     f86:	a6 e2       	ldi	r26, 0x26	; 38
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e6 e2       	ldi	r30, 0x26	; 38
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	88 60       	ori	r24, 0x08	; 8
     f92:	8c 93       	st	X, r24
	default:
		/*Do Nothing*/
		break;
	}

	switch(ADC_Config.Prescaler)
     f94:	80 91 78 00 	lds	r24, 0x0078
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	3c 83       	std	Y+4, r19	; 0x04
     f9e:	2b 83       	std	Y+3, r18	; 0x03
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	91 05       	cpc	r25, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <ADC_Init+0x426>
     faa:	70 c0       	rjmp	.+224    	; 0x108c <ADC_Init+0x506>
     fac:	2b 81       	ldd	r18, Y+3	; 0x03
     fae:	3c 81       	ldd	r19, Y+4	; 0x04
     fb0:	24 30       	cpi	r18, 0x04	; 4
     fb2:	31 05       	cpc	r19, r1
     fb4:	84 f4       	brge	.+32     	; 0xfd6 <ADC_Init+0x450>
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	91 05       	cpc	r25, r1
     fbe:	d1 f1       	breq	.+116    	; 0x1034 <ADC_Init+0x4ae>
     fc0:	2b 81       	ldd	r18, Y+3	; 0x03
     fc2:	3c 81       	ldd	r19, Y+4	; 0x04
     fc4:	22 30       	cpi	r18, 0x02	; 2
     fc6:	31 05       	cpc	r19, r1
     fc8:	0c f0       	brlt	.+2      	; 0xfcc <ADC_Init+0x446>
     fca:	4a c0       	rjmp	.+148    	; 0x1060 <ADC_Init+0x4da>
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	d1 f0       	breq	.+52     	; 0x1008 <ADC_Init+0x482>
     fd4:	c9 c0       	rjmp	.+402    	; 0x1168 <ADC_Init+0x5e2>
     fd6:	2b 81       	ldd	r18, Y+3	; 0x03
     fd8:	3c 81       	ldd	r19, Y+4	; 0x04
     fda:	25 30       	cpi	r18, 0x05	; 5
     fdc:	31 05       	cpc	r19, r1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <ADC_Init+0x45c>
     fe0:	81 c0       	rjmp	.+258    	; 0x10e4 <ADC_Init+0x55e>
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	85 30       	cpi	r24, 0x05	; 5
     fe8:	91 05       	cpc	r25, r1
     fea:	0c f4       	brge	.+2      	; 0xfee <ADC_Init+0x468>
     fec:	65 c0       	rjmp	.+202    	; 0x10b8 <ADC_Init+0x532>
     fee:	2b 81       	ldd	r18, Y+3	; 0x03
     ff0:	3c 81       	ldd	r19, Y+4	; 0x04
     ff2:	26 30       	cpi	r18, 0x06	; 6
     ff4:	31 05       	cpc	r19, r1
     ff6:	09 f4       	brne	.+2      	; 0xffa <ADC_Init+0x474>
     ff8:	8b c0       	rjmp	.+278    	; 0x1110 <ADC_Init+0x58a>
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	9c 81       	ldd	r25, Y+4	; 0x04
     ffe:	87 30       	cpi	r24, 0x07	; 7
    1000:	91 05       	cpc	r25, r1
    1002:	09 f4       	brne	.+2      	; 0x1006 <ADC_Init+0x480>
    1004:	9b c0       	rjmp	.+310    	; 0x113c <ADC_Init+0x5b6>
    1006:	b0 c0       	rjmp	.+352    	; 0x1168 <ADC_Init+0x5e2>
	{
	case PRESCALER_2A:
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS2);
    1008:	a6 e2       	ldi	r26, 0x26	; 38
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e6 e2       	ldi	r30, 0x26	; 38
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8b 7f       	andi	r24, 0xFB	; 251
    1014:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS1);
    1016:	a6 e2       	ldi	r26, 0x26	; 38
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e6 e2       	ldi	r30, 0x26	; 38
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8d 7f       	andi	r24, 0xFD	; 253
    1022:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS0);
    1024:	a6 e2       	ldi	r26, 0x26	; 38
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e6 e2       	ldi	r30, 0x26	; 38
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	8e 7f       	andi	r24, 0xFE	; 254
    1030:	8c 93       	st	X, r24
    1032:	af c0       	rjmp	.+350    	; 0x1192 <ADC_Init+0x60c>
		break;
	case PRESCALER_2B:
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS2);
    1034:	a6 e2       	ldi	r26, 0x26	; 38
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e6 e2       	ldi	r30, 0x26	; 38
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8b 7f       	andi	r24, 0xFB	; 251
    1040:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS1);
    1042:	a6 e2       	ldi	r26, 0x26	; 38
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e6 e2       	ldi	r30, 0x26	; 38
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8d 7f       	andi	r24, 0xFD	; 253
    104e:	8c 93       	st	X, r24
		SET_BIT(ADC_ADCSRA,ADC_ADPS0);
    1050:	a6 e2       	ldi	r26, 0x26	; 38
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e6 e2       	ldi	r30, 0x26	; 38
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	81 60       	ori	r24, 0x01	; 1
    105c:	8c 93       	st	X, r24
    105e:	99 c0       	rjmp	.+306    	; 0x1192 <ADC_Init+0x60c>
		break;
	case PRESCALER_4:
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS2);
    1060:	a6 e2       	ldi	r26, 0x26	; 38
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e6 e2       	ldi	r30, 0x26	; 38
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8b 7f       	andi	r24, 0xFB	; 251
    106c:	8c 93       	st	X, r24
		SET_BIT(ADC_ADCSRA,ADC_ADPS1);
    106e:	a6 e2       	ldi	r26, 0x26	; 38
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e6 e2       	ldi	r30, 0x26	; 38
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	82 60       	ori	r24, 0x02	; 2
    107a:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS0);
    107c:	a6 e2       	ldi	r26, 0x26	; 38
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e6 e2       	ldi	r30, 0x26	; 38
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	8e 7f       	andi	r24, 0xFE	; 254
    1088:	8c 93       	st	X, r24
    108a:	83 c0       	rjmp	.+262    	; 0x1192 <ADC_Init+0x60c>
		break;
	case PRESCALER_8:
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS2);
    108c:	a6 e2       	ldi	r26, 0x26	; 38
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e6 e2       	ldi	r30, 0x26	; 38
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8b 7f       	andi	r24, 0xFB	; 251
    1098:	8c 93       	st	X, r24
		SET_BIT(ADC_ADCSRA,ADC_ADPS1);
    109a:	a6 e2       	ldi	r26, 0x26	; 38
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e6 e2       	ldi	r30, 0x26	; 38
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	82 60       	ori	r24, 0x02	; 2
    10a6:	8c 93       	st	X, r24
		SET_BIT(ADC_ADCSRA,ADC_ADPS0);
    10a8:	a6 e2       	ldi	r26, 0x26	; 38
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e6 e2       	ldi	r30, 0x26	; 38
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	81 60       	ori	r24, 0x01	; 1
    10b4:	8c 93       	st	X, r24
    10b6:	6d c0       	rjmp	.+218    	; 0x1192 <ADC_Init+0x60c>
		break;
	case PRESCALER_16:
		SET_BIT(ADC_ADCSRA,ADC_ADPS2);
    10b8:	a6 e2       	ldi	r26, 0x26	; 38
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e6 e2       	ldi	r30, 0x26	; 38
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	84 60       	ori	r24, 0x04	; 4
    10c4:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS1);
    10c6:	a6 e2       	ldi	r26, 0x26	; 38
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e6 e2       	ldi	r30, 0x26	; 38
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8d 7f       	andi	r24, 0xFD	; 253
    10d2:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS0);
    10d4:	a6 e2       	ldi	r26, 0x26	; 38
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e6 e2       	ldi	r30, 0x26	; 38
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8e 7f       	andi	r24, 0xFE	; 254
    10e0:	8c 93       	st	X, r24
    10e2:	57 c0       	rjmp	.+174    	; 0x1192 <ADC_Init+0x60c>
		break;
	case PRESCALER_32:
		SET_BIT(ADC_ADCSRA,ADC_ADPS2);
    10e4:	a6 e2       	ldi	r26, 0x26	; 38
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e6 e2       	ldi	r30, 0x26	; 38
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	84 60       	ori	r24, 0x04	; 4
    10f0:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS1);
    10f2:	a6 e2       	ldi	r26, 0x26	; 38
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e6 e2       	ldi	r30, 0x26	; 38
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8d 7f       	andi	r24, 0xFD	; 253
    10fe:	8c 93       	st	X, r24
		SET_BIT(ADC_ADCSRA,ADC_ADPS0);
    1100:	a6 e2       	ldi	r26, 0x26	; 38
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e6 e2       	ldi	r30, 0x26	; 38
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	81 60       	ori	r24, 0x01	; 1
    110c:	8c 93       	st	X, r24
    110e:	41 c0       	rjmp	.+130    	; 0x1192 <ADC_Init+0x60c>
		break;
	case PRESCALER_64:
		SET_BIT(ADC_ADCSRA,ADC_ADPS2);
    1110:	a6 e2       	ldi	r26, 0x26	; 38
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e6 e2       	ldi	r30, 0x26	; 38
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	84 60       	ori	r24, 0x04	; 4
    111c:	8c 93       	st	X, r24
		SET_BIT(ADC_ADCSRA,ADC_ADPS1);
    111e:	a6 e2       	ldi	r26, 0x26	; 38
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e6 e2       	ldi	r30, 0x26	; 38
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	82 60       	ori	r24, 0x02	; 2
    112a:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS0);
    112c:	a6 e2       	ldi	r26, 0x26	; 38
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e6 e2       	ldi	r30, 0x26	; 38
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8e 7f       	andi	r24, 0xFE	; 254
    1138:	8c 93       	st	X, r24
    113a:	2b c0       	rjmp	.+86     	; 0x1192 <ADC_Init+0x60c>
		break;
	case PRESCALER_128:
		SET_BIT(ADC_ADCSRA,ADC_ADPS2);
    113c:	a6 e2       	ldi	r26, 0x26	; 38
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e6 e2       	ldi	r30, 0x26	; 38
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	84 60       	ori	r24, 0x04	; 4
    1148:	8c 93       	st	X, r24
		SET_BIT(ADC_ADCSRA,ADC_ADPS1);
    114a:	a6 e2       	ldi	r26, 0x26	; 38
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e6 e2       	ldi	r30, 0x26	; 38
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	82 60       	ori	r24, 0x02	; 2
    1156:	8c 93       	st	X, r24
		SET_BIT(ADC_ADCSRA,ADC_ADPS0);
    1158:	a6 e2       	ldi	r26, 0x26	; 38
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e6 e2       	ldi	r30, 0x26	; 38
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	81 60       	ori	r24, 0x01	; 1
    1164:	8c 93       	st	X, r24
    1166:	15 c0       	rjmp	.+42     	; 0x1192 <ADC_Init+0x60c>
		break;
	default:
		SET_BIT(ADC_ADCSRA,ADC_ADPS2);
    1168:	a6 e2       	ldi	r26, 0x26	; 38
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e6 e2       	ldi	r30, 0x26	; 38
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	84 60       	ori	r24, 0x04	; 4
    1174:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS1);
    1176:	a6 e2       	ldi	r26, 0x26	; 38
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e6 e2       	ldi	r30, 0x26	; 38
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	8d 7f       	andi	r24, 0xFD	; 253
    1182:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_ADCSRA,ADC_ADPS0);
    1184:	a6 e2       	ldi	r26, 0x26	; 38
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e6 e2       	ldi	r30, 0x26	; 38
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8e 7f       	andi	r24, 0xFE	; 254
    1190:	8c 93       	st	X, r24
		break;
	}

	switch(ADC_Config.TriggerSource)
    1192:	80 91 79 00 	lds	r24, 0x0079
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3a 83       	std	Y+2, r19	; 0x02
    119c:	29 83       	std	Y+1, r18	; 0x01
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	91 05       	cpc	r25, r1
    11a6:	41 f1       	breq	.+80     	; 0x11f8 <ADC_Init+0x672>
    11a8:	29 81       	ldd	r18, Y+1	; 0x01
    11aa:	3a 81       	ldd	r19, Y+2	; 0x02
    11ac:	23 30       	cpi	r18, 0x03	; 3
    11ae:	31 05       	cpc	r19, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <ADC_Init+0x62e>
    11b2:	3f c0       	rjmp	.+126    	; 0x1232 <ADC_Init+0x6ac>
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	09 f0       	breq	.+2      	; 0x11be <ADC_Init+0x638>
    11bc:	41 c0       	rjmp	.+130    	; 0x1240 <ADC_Init+0x6ba>
	{
	case FREE_RUNNING_MODE:
		SET_BIT(ADC_ADCSRA,ADC_ADATE);
    11be:	a6 e2       	ldi	r26, 0x26	; 38
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e6 e2       	ldi	r30, 0x26	; 38
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	80 62       	ori	r24, 0x20	; 32
    11ca:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_SFIOR,ADC_ADTS2);
    11cc:	a0 e5       	ldi	r26, 0x50	; 80
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e0 e5       	ldi	r30, 0x50	; 80
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8f 77       	andi	r24, 0x7F	; 127
    11d8:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_SFIOR,ADC_ADTS1);
    11da:	a0 e5       	ldi	r26, 0x50	; 80
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e0 e5       	ldi	r30, 0x50	; 80
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8f 7b       	andi	r24, 0xBF	; 191
    11e6:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_SFIOR,ADC_ADTS0);
    11e8:	a0 e5       	ldi	r26, 0x50	; 80
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e0 e5       	ldi	r30, 0x50	; 80
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	8f 7d       	andi	r24, 0xDF	; 223
    11f4:	8c 93       	st	X, r24
    11f6:	24 c0       	rjmp	.+72     	; 0x1240 <ADC_Init+0x6ba>
		break;
	case EXTERNAL_INTRRUPT_0:
		SET_BIT(ADC_ADCSRA,ADC_ADATE);
    11f8:	a6 e2       	ldi	r26, 0x26	; 38
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e6 e2       	ldi	r30, 0x26	; 38
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	80 62       	ori	r24, 0x20	; 32
    1204:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_SFIOR,ADC_ADTS2);
    1206:	a0 e5       	ldi	r26, 0x50	; 80
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e0 e5       	ldi	r30, 0x50	; 80
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	8f 77       	andi	r24, 0x7F	; 127
    1212:	8c 93       	st	X, r24
		SET_BIT(ADC_SFIOR,ADC_ADTS1);
    1214:	a0 e5       	ldi	r26, 0x50	; 80
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e0 e5       	ldi	r30, 0x50	; 80
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	80 64       	ori	r24, 0x40	; 64
    1220:	8c 93       	st	X, r24
		CLEAR_BIT(ADC_SFIOR,ADC_ADTS0);
    1222:	a0 e5       	ldi	r26, 0x50	; 80
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e0 e5       	ldi	r30, 0x50	; 80
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8f 7d       	andi	r24, 0xDF	; 223
    122e:	8c 93       	st	X, r24
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <ADC_Init+0x6ba>
		break;
	case SINGLE_MODE:
		CLEAR_BIT(ADC_ADCSRA,ADC_ADATE);
    1232:	a6 e2       	ldi	r26, 0x26	; 38
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e6 e2       	ldi	r30, 0x26	; 38
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8f 7d       	andi	r24, 0xDF	; 223
    123e:	8c 93       	st	X, r24
	default:
		/*Do Nothing*/
		break;
	}

}
    1240:	2c 96       	adiw	r28, 0x0c	; 12
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <ADC_SelectChannel>:
 * Outputs:			Digital uint16 Data
 *
 * Return:			NULL
 *******************************************************************************/
void ADC_SelectChannel(EnmADCAnalogChannel_t a_ChannelNumber)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	89 83       	std	Y+1, r24	; 0x01
	/* channel number must be from 0 --> 7 */
	/* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
	/* choose the correct channel by setting the channel number in MUX4:0 bits */
	ADC_ADMUX = (ADC_ADMUX & 0xE0)|(a_ChannelNumber);
    125e:	a7 e2       	ldi	r26, 0x27	; 39
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e7 e2       	ldi	r30, 0x27	; 39
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	98 2f       	mov	r25, r24
    126a:	90 7e       	andi	r25, 0xE0	; 224
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	89 2b       	or	r24, r25
    1270:	8c 93       	st	X, r24
}
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <ADC_StartConversion>:

void ADC_StartConversion(void)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADC_ADCSRA,ADC_ADSC); /* start conversion write '1' to ADSC */
    1282:	a6 e2       	ldi	r26, 0x26	; 38
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e6 e2       	ldi	r30, 0x26	; 38
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	80 64       	ori	r24, 0x40	; 64
    128e:	8c 93       	st	X, r24
	switch(ADC_Config.IntConfig)
    1290:	80 91 7a 00 	lds	r24, 0x007A
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	91 f4       	brne	.+36     	; 0x12c0 <ADC_StartConversion+0x46>
	{
	case ADC_INTERRUPT_DISABLE:
		while(GET_BIT(ADC_ADCSRA,ADC_ADIF)==LOW);
    129c:	e6 e2       	ldi	r30, 0x26	; 38
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	82 95       	swap	r24
    12a4:	8f 70       	andi	r24, 0x0F	; 15
    12a6:	88 2f       	mov	r24, r24
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	81 70       	andi	r24, 0x01	; 1
    12ac:	90 70       	andi	r25, 0x00	; 0
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	a9 f3       	breq	.-22     	; 0x129c <ADC_StartConversion+0x22>
		SET_BIT(ADC_ADCSRA,ADC_ADIF); /* clear ADIF by write '1' to it :) */
    12b2:	a6 e2       	ldi	r26, 0x26	; 38
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e6 e2       	ldi	r30, 0x26	; 38
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	80 61       	ori	r24, 0x10	; 16
    12be:	8c 93       	st	X, r24
		break;
	default:
		/*DO Nothing*/
		break;
	}
}
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <ADC_ReadChannel>:

uint16 ADC_ReadChannel(void)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <ADC_ReadChannel+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <ADC_ReadChannel+0x8>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
	uint16 Data;
	switch(ADC_Config.Adjustment)
    12d2:	80 91 76 00 	lds	r24, 0x0076
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	3c 83       	std	Y+4, r19	; 0x04
    12dc:	2b 83       	std	Y+3, r18	; 0x03
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	31 f0       	breq	.+12     	; 0x12f2 <ADC_ReadChannel+0x2c>
    12e6:	2b 81       	ldd	r18, Y+3	; 0x03
    12e8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ea:	21 30       	cpi	r18, 0x01	; 1
    12ec:	31 05       	cpc	r19, r1
    12ee:	41 f0       	breq	.+16     	; 0x1300 <ADC_ReadChannel+0x3a>
    12f0:	1a c0       	rjmp	.+52     	; 0x1326 <ADC_ReadChannel+0x60>
	{
	case RIGHT_ADJUSTMENT:
		Data = ADC;
    12f2:	e4 e2       	ldi	r30, 0x24	; 36
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	91 81       	ldd	r25, Z+1	; 0x01
    12fa:	9a 83       	std	Y+2, r25	; 0x02
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	19 c0       	rjmp	.+50     	; 0x1332 <ADC_ReadChannel+0x6c>
		break;
	case LEFT_ADJUSTMENT:
		ADC = (ADC>>6);
    1300:	a4 e2       	ldi	r26, 0x24	; 36
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e4 e2       	ldi	r30, 0x24	; 36
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	00 24       	eor	r0, r0
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	00 1c       	adc	r0, r0
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	00 1c       	adc	r0, r0
    131a:	89 2f       	mov	r24, r25
    131c:	90 2d       	mov	r25, r0
    131e:	11 96       	adiw	r26, 0x01	; 1
    1320:	9c 93       	st	X, r25
    1322:	8e 93       	st	-X, r24
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <ADC_ReadChannel+0x6c>
		break;
	default:
		Data = ADC;
    1326:	e4 e2       	ldi	r30, 0x24	; 36
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ADC;
    1332:	e4 e2       	ldi	r30, 0x24	; 36
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <ADC_DeInit>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void ADC_DeInit(void)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADC_ADCSRA,ADC_ADEN);
    1350:	a6 e2       	ldi	r26, 0x26	; 38
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e6 e2       	ldi	r30, 0x26	; 38
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8f 77       	andi	r24, 0x7F	; 127
    135c:	8c 93       	st	X, r24
	CLEAR_BIT(ADC_ADCSRA,ADC_ADIE);
    135e:	a6 e2       	ldi	r26, 0x26	; 38
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e6 e2       	ldi	r30, 0x26	; 38
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	87 7f       	andi	r24, 0xF7	; 247
    136a:	8c 93       	st	X, r24
}
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <DIO_WritePin>:

#include "DIO.h"


void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <DIO_WritePin+0x6>
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	6a 83       	std	Y+2, r22	; 0x02
	if(PinValue==HIGH)
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	09 f0       	breq	.+2      	; 0x1388 <DIO_WritePin+0x16>
    1386:	6d c0       	rjmp	.+218    	; 0x1462 <DIO_WritePin+0xf0>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	88 30       	cpi	r24, 0x08	; 8
    138c:	a0 f4       	brcc	.+40     	; 0x13b6 <DIO_WritePin+0x44>
		{
			SET_BIT(DIO_PORTA,PinNum);
    138e:	ab e3       	ldi	r26, 0x3B	; 59
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	eb e3       	ldi	r30, 0x3B	; 59
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_WritePin+0x3a>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_WritePin+0x36>
    13b0:	84 2b       	or	r24, r20
    13b2:	8c 93       	st	X, r24
    13b4:	c8 c0       	rjmp	.+400    	; 0x1546 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	88 30       	cpi	r24, 0x08	; 8
    13ba:	c8 f0       	brcs	.+50     	; 0x13ee <DIO_WritePin+0x7c>
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	80 31       	cpi	r24, 0x10	; 16
    13c0:	b0 f4       	brcc	.+44     	; 0x13ee <DIO_WritePin+0x7c>
		{
			SET_BIT(DIO_PORTB,(PinNum-DIO_PIN8));
    13c2:	a8 e3       	ldi	r26, 0x38	; 56
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e8 e3       	ldi	r30, 0x38	; 56
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	08 97       	sbiw	r24, 0x08	; 8
    13d6:	9c 01       	movw	r18, r24
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_WritePin+0x72>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_WritePin+0x6e>
    13e8:	84 2b       	or	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	ac c0       	rjmp	.+344    	; 0x1546 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	80 31       	cpi	r24, 0x10	; 16
    13f2:	c8 f0       	brcs	.+50     	; 0x1426 <DIO_WritePin+0xb4>
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	88 31       	cpi	r24, 0x18	; 24
    13f8:	b0 f4       	brcc	.+44     	; 0x1426 <DIO_WritePin+0xb4>
		{
			SET_BIT(DIO_PORTC,(PinNum-DIO_PIN16));
    13fa:	a5 e3       	ldi	r26, 0x35	; 53
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e3       	ldi	r30, 0x35	; 53
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	40 97       	sbiw	r24, 0x10	; 16
    140e:	9c 01       	movw	r18, r24
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_WritePin+0xaa>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_WritePin+0xa6>
    1420:	84 2b       	or	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	90 c0       	rjmp	.+288    	; 0x1546 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	88 31       	cpi	r24, 0x18	; 24
    142a:	08 f4       	brcc	.+2      	; 0x142e <DIO_WritePin+0xbc>
    142c:	8c c0       	rjmp	.+280    	; 0x1546 <DIO_WritePin+0x1d4>
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	80 32       	cpi	r24, 0x20	; 32
    1432:	08 f0       	brcs	.+2      	; 0x1436 <DIO_WritePin+0xc4>
    1434:	88 c0       	rjmp	.+272    	; 0x1546 <DIO_WritePin+0x1d4>
		{
			SET_BIT(DIO_PORTD,(PinNum-DIO_PIN24));
    1436:	a2 e3       	ldi	r26, 0x32	; 50
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e2 e3       	ldi	r30, 0x32	; 50
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	48 97       	sbiw	r24, 0x18	; 24
    144a:	9c 01       	movw	r18, r24
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_WritePin+0xe6>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_WritePin+0xe2>
    145c:	84 2b       	or	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	72 c0       	rjmp	.+228    	; 0x1546 <DIO_WritePin+0x1d4>
		}
	}
	else if(PinValue==DIO_PIN0)
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	88 23       	and	r24, r24
    1466:	09 f0       	breq	.+2      	; 0x146a <DIO_WritePin+0xf8>
    1468:	6e c0       	rjmp	.+220    	; 0x1546 <DIO_WritePin+0x1d4>
	{

		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	88 30       	cpi	r24, 0x08	; 8
    146e:	a8 f4       	brcc	.+42     	; 0x149a <DIO_WritePin+0x128>
		{
			CLEAR_BIT(DIO_PORTA,PinNum);
    1470:	ab e3       	ldi	r26, 0x3B	; 59
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	eb e3       	ldi	r30, 0x3B	; 59
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	48 2f       	mov	r20, r24
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	02 2e       	mov	r0, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <DIO_WritePin+0x11c>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	0a 94       	dec	r0
    1490:	e2 f7       	brpl	.-8      	; 0x148a <DIO_WritePin+0x118>
    1492:	80 95       	com	r24
    1494:	84 23       	and	r24, r20
    1496:	8c 93       	st	X, r24
    1498:	56 c0       	rjmp	.+172    	; 0x1546 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	88 30       	cpi	r24, 0x08	; 8
    149e:	d0 f0       	brcs	.+52     	; 0x14d4 <DIO_WritePin+0x162>
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	80 31       	cpi	r24, 0x10	; 16
    14a4:	b8 f4       	brcc	.+46     	; 0x14d4 <DIO_WritePin+0x162>
		{
			CLEAR_BIT(DIO_PORTB,(PinNum-DIO_PIN8));
    14a6:	a8 e3       	ldi	r26, 0x38	; 56
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e8 e3       	ldi	r30, 0x38	; 56
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	88 2f       	mov	r24, r24
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	08 97       	sbiw	r24, 0x08	; 8
    14ba:	9c 01       	movw	r18, r24
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_WritePin+0x156>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_WritePin+0x152>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	39 c0       	rjmp	.+114    	; 0x1546 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	80 31       	cpi	r24, 0x10	; 16
    14d8:	d0 f0       	brcs	.+52     	; 0x150e <DIO_WritePin+0x19c>
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	88 31       	cpi	r24, 0x18	; 24
    14de:	b8 f4       	brcc	.+46     	; 0x150e <DIO_WritePin+0x19c>
		{
			CLEAR_BIT(DIO_PORTC,(PinNum-DIO_PIN16));
    14e0:	a5 e3       	ldi	r26, 0x35	; 53
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e5 e3       	ldi	r30, 0x35	; 53
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	40 97       	sbiw	r24, 0x10	; 16
    14f4:	9c 01       	movw	r18, r24
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_WritePin+0x190>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_WritePin+0x18c>
    1506:	80 95       	com	r24
    1508:	84 23       	and	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	1c c0       	rjmp	.+56     	; 0x1546 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	88 31       	cpi	r24, 0x18	; 24
    1512:	c8 f0       	brcs	.+50     	; 0x1546 <DIO_WritePin+0x1d4>
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	80 32       	cpi	r24, 0x20	; 32
    1518:	b0 f4       	brcc	.+44     	; 0x1546 <DIO_WritePin+0x1d4>
		{
			CLEAR_BIT(DIO_PORTD,(PinNum-DIO_PIN24));
    151a:	a2 e3       	ldi	r26, 0x32	; 50
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e2 e3       	ldi	r30, 0x32	; 50
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	48 97       	sbiw	r24, 0x18	; 24
    152e:	9c 01       	movw	r18, r24
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_WritePin+0x1ca>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_WritePin+0x1c6>
    1540:	80 95       	com	r24
    1542:	84 23       	and	r24, r20
    1544:	8c 93       	st	X, r24

		}
	}

}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <DIO_ReadPin+0x6>
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	89 83       	std	Y+1, r24	; 0x01
	if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	88 30       	cpi	r24, 0x08	; 8
    1560:	98 f4       	brcc	.+38     	; 0x1588 <DIO_ReadPin+0x38>
	{
		return GET_BIT(DIO_PINA,PinNum);
    1562:	e9 e3       	ldi	r30, 0x39	; 57
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a9 01       	movw	r20, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <DIO_ReadPin+0x2a>
    1576:	55 95       	asr	r21
    1578:	47 95       	ror	r20
    157a:	8a 95       	dec	r24
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <DIO_ReadPin+0x26>
    157e:	ca 01       	movw	r24, r20
    1580:	58 2f       	mov	r21, r24
    1582:	51 70       	andi	r21, 0x01	; 1
    1584:	5a 83       	std	Y+2, r21	; 0x02
    1586:	50 c0       	rjmp	.+160    	; 0x1628 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	88 30       	cpi	r24, 0x08	; 8
    158c:	b8 f0       	brcs	.+46     	; 0x15bc <DIO_ReadPin+0x6c>
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	80 31       	cpi	r24, 0x10	; 16
    1592:	a0 f4       	brcc	.+40     	; 0x15bc <DIO_ReadPin+0x6c>
	{
		return GET_BIT(DIO_PINB,(PinNum-DIO_PIN8));
    1594:	e6 e3       	ldi	r30, 0x36	; 54
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	08 97       	sbiw	r24, 0x08	; 8
    15a6:	a9 01       	movw	r20, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_ReadPin+0x5e>
    15aa:	55 95       	asr	r21
    15ac:	47 95       	ror	r20
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_ReadPin+0x5a>
    15b2:	ca 01       	movw	r24, r20
    15b4:	58 2f       	mov	r21, r24
    15b6:	51 70       	andi	r21, 0x01	; 1
    15b8:	5a 83       	std	Y+2, r21	; 0x02
    15ba:	36 c0       	rjmp	.+108    	; 0x1628 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	80 31       	cpi	r24, 0x10	; 16
    15c0:	b8 f0       	brcs	.+46     	; 0x15f0 <DIO_ReadPin+0xa0>
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	88 31       	cpi	r24, 0x18	; 24
    15c6:	a0 f4       	brcc	.+40     	; 0x15f0 <DIO_ReadPin+0xa0>
	{
		return GET_BIT(DIO_PINC,(PinNum-DIO_PIN16));
    15c8:	e3 e3       	ldi	r30, 0x33	; 51
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	88 2f       	mov	r24, r24
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	40 97       	sbiw	r24, 0x10	; 16
    15da:	a9 01       	movw	r20, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <DIO_ReadPin+0x92>
    15de:	55 95       	asr	r21
    15e0:	47 95       	ror	r20
    15e2:	8a 95       	dec	r24
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <DIO_ReadPin+0x8e>
    15e6:	ca 01       	movw	r24, r20
    15e8:	58 2f       	mov	r21, r24
    15ea:	51 70       	andi	r21, 0x01	; 1
    15ec:	5a 83       	std	Y+2, r21	; 0x02
    15ee:	1c c0       	rjmp	.+56     	; 0x1628 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	88 31       	cpi	r24, 0x18	; 24
    15f4:	b8 f0       	brcs	.+46     	; 0x1624 <DIO_ReadPin+0xd4>
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	80 32       	cpi	r24, 0x20	; 32
    15fa:	a0 f4       	brcc	.+40     	; 0x1624 <DIO_ReadPin+0xd4>
	{
		return GET_BIT(DIO_PIND,(PinNum-DIO_PIN24));
    15fc:	e0 e3       	ldi	r30, 0x30	; 48
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	48 97       	sbiw	r24, 0x18	; 24
    160e:	a9 01       	movw	r20, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_ReadPin+0xc6>
    1612:	55 95       	asr	r21
    1614:	47 95       	ror	r20
    1616:	8a 95       	dec	r24
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_ReadPin+0xc2>
    161a:	ca 01       	movw	r24, r20
    161c:	58 2f       	mov	r21, r24
    161e:	51 70       	andi	r21, 0x01	; 1
    1620:	5a 83       	std	Y+2, r21	; 0x02
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_ReadPin+0xd8>
	}
	return DIO_PIN8;
    1624:	88 e0       	ldi	r24, 0x08	; 8
    1626:	8a 83       	std	Y+2, r24	; 0x02
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <DIO_SetPinDirection+0x6>
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==INPUT)
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	88 23       	and	r24, r24
    1646:	09 f0       	breq	.+2      	; 0x164a <DIO_SetPinDirection+0x16>
    1648:	71 c0       	rjmp	.+226    	; 0x172c <DIO_SetPinDirection+0xf8>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	88 30       	cpi	r24, 0x08	; 8
    164e:	a8 f4       	brcc	.+42     	; 0x167a <DIO_SetPinDirection+0x46>
		{
			CLEAR_BIT(DIO_DDRA,PinNum);
    1650:	aa e3       	ldi	r26, 0x3A	; 58
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	ea e3       	ldi	r30, 0x3A	; 58
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <DIO_SetPinDirection+0x3a>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <DIO_SetPinDirection+0x36>
    1672:	80 95       	com	r24
    1674:	84 23       	and	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	c7 c0       	rjmp	.+398    	; 0x1808 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	88 30       	cpi	r24, 0x08	; 8
    167e:	d0 f0       	brcs	.+52     	; 0x16b4 <DIO_SetPinDirection+0x80>
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	80 31       	cpi	r24, 0x10	; 16
    1684:	b8 f4       	brcc	.+46     	; 0x16b4 <DIO_SetPinDirection+0x80>
		{
			CLEAR_BIT(DIO_DDRB,(PinNum-DIO_PIN8));
    1686:	a7 e3       	ldi	r26, 0x37	; 55
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e7 e3       	ldi	r30, 0x37	; 55
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	08 97       	sbiw	r24, 0x08	; 8
    169a:	9c 01       	movw	r18, r24
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_SetPinDirection+0x74>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_SetPinDirection+0x70>
    16ac:	80 95       	com	r24
    16ae:	84 23       	and	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	aa c0       	rjmp	.+340    	; 0x1808 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	80 31       	cpi	r24, 0x10	; 16
    16b8:	d0 f0       	brcs	.+52     	; 0x16ee <DIO_SetPinDirection+0xba>
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	88 31       	cpi	r24, 0x18	; 24
    16be:	b8 f4       	brcc	.+46     	; 0x16ee <DIO_SetPinDirection+0xba>
		{
			CLEAR_BIT(DIO_DDRC,(PinNum-DIO_PIN16));
    16c0:	a4 e3       	ldi	r26, 0x34	; 52
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e4 e3       	ldi	r30, 0x34	; 52
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	40 97       	sbiw	r24, 0x10	; 16
    16d4:	9c 01       	movw	r18, r24
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_SetPinDirection+0xae>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <DIO_SetPinDirection+0xaa>
    16e6:	80 95       	com	r24
    16e8:	84 23       	and	r24, r20
    16ea:	8c 93       	st	X, r24
    16ec:	8d c0       	rjmp	.+282    	; 0x1808 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	88 31       	cpi	r24, 0x18	; 24
    16f2:	08 f4       	brcc	.+2      	; 0x16f6 <DIO_SetPinDirection+0xc2>
    16f4:	89 c0       	rjmp	.+274    	; 0x1808 <DIO_SetPinDirection+0x1d4>
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	80 32       	cpi	r24, 0x20	; 32
    16fa:	08 f0       	brcs	.+2      	; 0x16fe <DIO_SetPinDirection+0xca>
    16fc:	85 c0       	rjmp	.+266    	; 0x1808 <DIO_SetPinDirection+0x1d4>
		{
			CLEAR_BIT(DIO_DDRD,(PinNum-DIO_PIN24));
    16fe:	a1 e3       	ldi	r26, 0x31	; 49
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e1 e3       	ldi	r30, 0x31	; 49
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	88 2f       	mov	r24, r24
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	48 97       	sbiw	r24, 0x18	; 24
    1712:	9c 01       	movw	r18, r24
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <DIO_SetPinDirection+0xec>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <DIO_SetPinDirection+0xe8>
    1724:	80 95       	com	r24
    1726:	84 23       	and	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	6e c0       	rjmp	.+220    	; 0x1808 <DIO_SetPinDirection+0x1d4>
		}
	}
	else if(PinDirection==OUTPUT)
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	09 f0       	breq	.+2      	; 0x1734 <DIO_SetPinDirection+0x100>
    1732:	6a c0       	rjmp	.+212    	; 0x1808 <DIO_SetPinDirection+0x1d4>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	88 30       	cpi	r24, 0x08	; 8
    1738:	a0 f4       	brcc	.+40     	; 0x1762 <DIO_SetPinDirection+0x12e>
		{
			SET_BIT(DIO_DDRA,PinNum);
    173a:	aa e3       	ldi	r26, 0x3A	; 58
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	ea e3       	ldi	r30, 0x3A	; 58
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 2e       	mov	r0, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <DIO_SetPinDirection+0x124>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	0a 94       	dec	r0
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <DIO_SetPinDirection+0x120>
    175c:	84 2b       	or	r24, r20
    175e:	8c 93       	st	X, r24
    1760:	53 c0       	rjmp	.+166    	; 0x1808 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	88 30       	cpi	r24, 0x08	; 8
    1766:	c8 f0       	brcs	.+50     	; 0x179a <DIO_SetPinDirection+0x166>
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	80 31       	cpi	r24, 0x10	; 16
    176c:	b0 f4       	brcc	.+44     	; 0x179a <DIO_SetPinDirection+0x166>
		{
			SET_BIT(DIO_DDRB,(PinNum-DIO_PIN8));
    176e:	a7 e3       	ldi	r26, 0x37	; 55
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e7 e3       	ldi	r30, 0x37	; 55
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	08 97       	sbiw	r24, 0x08	; 8
    1782:	9c 01       	movw	r18, r24
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_SetPinDirection+0x15c>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <DIO_SetPinDirection+0x158>
    1794:	84 2b       	or	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	37 c0       	rjmp	.+110    	; 0x1808 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	80 31       	cpi	r24, 0x10	; 16
    179e:	c8 f0       	brcs	.+50     	; 0x17d2 <DIO_SetPinDirection+0x19e>
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	88 31       	cpi	r24, 0x18	; 24
    17a4:	b0 f4       	brcc	.+44     	; 0x17d2 <DIO_SetPinDirection+0x19e>
		{
			SET_BIT(DIO_DDRC,(PinNum-DIO_PIN16));
    17a6:	a4 e3       	ldi	r26, 0x34	; 52
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e4 e3       	ldi	r30, 0x34	; 52
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	40 97       	sbiw	r24, 0x10	; 16
    17ba:	9c 01       	movw	r18, r24
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_SetPinDirection+0x194>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_SetPinDirection+0x190>
    17cc:	84 2b       	or	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	1b c0       	rjmp	.+54     	; 0x1808 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	88 31       	cpi	r24, 0x18	; 24
    17d6:	c0 f0       	brcs	.+48     	; 0x1808 <DIO_SetPinDirection+0x1d4>
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	80 32       	cpi	r24, 0x20	; 32
    17dc:	a8 f4       	brcc	.+42     	; 0x1808 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DIO_DDRD,(PinNum-DIO_PIN24));
    17de:	a1 e3       	ldi	r26, 0x31	; 49
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e1 e3       	ldi	r30, 0x31	; 49
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	48 97       	sbiw	r24, 0x18	; 24
    17f2:	9c 01       	movw	r18, r24
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <DIO_SetPinDirection+0x1cc>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <DIO_SetPinDirection+0x1c8>
    1804:	84 2b       	or	r24, r20
    1806:	8c 93       	st	X, r24
		}
	}


}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    181a:	e4 e3       	ldi	r30, 0x34	; 52
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	8f ef       	ldi	r24, 0xFF	; 255
    1820:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1822:	a1 e3       	ldi	r26, 0x31	; 49
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e1 e3       	ldi	r30, 0x31	; 49
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	80 67       	ori	r24, 0x70	; 112
    182e:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1830:	88 e3       	ldi	r24, 0x38	; 56
    1832:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1836:	8c e0       	ldi	r24, 0x0C	; 12
    1838:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_sendCommand>
}
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	e9 97       	sbiw	r28, 0x39	; 57
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    185e:	a2 e3       	ldi	r26, 0x32	; 50
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e2 e3       	ldi	r30, 0x32	; 50
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	8f 7e       	andi	r24, 0xEF	; 239
    186a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    186c:	a2 e3       	ldi	r26, 0x32	; 50
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e2 e3       	ldi	r30, 0x32	; 50
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8f 7d       	andi	r24, 0xDF	; 223
    1878:	8c 93       	st	X, r24
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a0 e8       	ldi	r26, 0x80	; 128
    1880:	bf e3       	ldi	r27, 0x3F	; 63
    1882:	8d ab       	std	Y+53, r24	; 0x35
    1884:	9e ab       	std	Y+54, r25	; 0x36
    1886:	af ab       	std	Y+55, r26	; 0x37
    1888:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188a:	6d a9       	ldd	r22, Y+53	; 0x35
    188c:	7e a9       	ldd	r23, Y+54	; 0x36
    188e:	8f a9       	ldd	r24, Y+55	; 0x37
    1890:	98 ad       	ldd	r25, Y+56	; 0x38
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	4a ef       	ldi	r20, 0xFA	; 250
    1898:	54 e4       	ldi	r21, 0x44	; 68
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	89 ab       	std	Y+49, r24	; 0x31
    18a4:	9a ab       	std	Y+50, r25	; 0x32
    18a6:	ab ab       	std	Y+51, r26	; 0x33
    18a8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18aa:	69 a9       	ldd	r22, Y+49	; 0x31
    18ac:	7a a9       	ldd	r23, Y+50	; 0x32
    18ae:	8b a9       	ldd	r24, Y+51	; 0x33
    18b0:	9c a9       	ldd	r25, Y+52	; 0x34
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18be:	88 23       	and	r24, r24
    18c0:	2c f4       	brge	.+10     	; 0x18cc <LCD_sendCommand+0x84>
		__ticks = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	98 ab       	std	Y+48, r25	; 0x30
    18c8:	8f a7       	std	Y+47, r24	; 0x2f
    18ca:	3f c0       	rjmp	.+126    	; 0x194a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    18cc:	69 a9       	ldd	r22, Y+49	; 0x31
    18ce:	7a a9       	ldd	r23, Y+50	; 0x32
    18d0:	8b a9       	ldd	r24, Y+51	; 0x33
    18d2:	9c a9       	ldd	r25, Y+52	; 0x34
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	57 e4       	ldi	r21, 0x47	; 71
    18dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	4c f5       	brge	.+82     	; 0x1936 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e4:	6d a9       	ldd	r22, Y+53	; 0x35
    18e6:	7e a9       	ldd	r23, Y+54	; 0x36
    18e8:	8f a9       	ldd	r24, Y+55	; 0x37
    18ea:	98 ad       	ldd	r25, Y+56	; 0x38
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e2       	ldi	r20, 0x20	; 32
    18f2:	51 e4       	ldi	r21, 0x41	; 65
    18f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	bc 01       	movw	r22, r24
    18fe:	cd 01       	movw	r24, r26
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	98 ab       	std	Y+48, r25	; 0x30
    190a:	8f a7       	std	Y+47, r24	; 0x2f
    190c:	0f c0       	rjmp	.+30     	; 0x192c <LCD_sendCommand+0xe4>
    190e:	88 ec       	ldi	r24, 0xC8	; 200
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9e a7       	std	Y+46, r25	; 0x2e
    1914:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1916:	8d a5       	ldd	r24, Y+45	; 0x2d
    1918:	9e a5       	ldd	r25, Y+46	; 0x2e
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <LCD_sendCommand+0xd2>
    191e:	9e a7       	std	Y+46, r25	; 0x2e
    1920:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1922:	8f a5       	ldd	r24, Y+47	; 0x2f
    1924:	98 a9       	ldd	r25, Y+48	; 0x30
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	98 ab       	std	Y+48, r25	; 0x30
    192a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192c:	8f a5       	ldd	r24, Y+47	; 0x2f
    192e:	98 a9       	ldd	r25, Y+48	; 0x30
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	69 f7       	brne	.-38     	; 0x190e <LCD_sendCommand+0xc6>
    1934:	14 c0       	rjmp	.+40     	; 0x195e <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1936:	69 a9       	ldd	r22, Y+49	; 0x31
    1938:	7a a9       	ldd	r23, Y+50	; 0x32
    193a:	8b a9       	ldd	r24, Y+51	; 0x33
    193c:	9c a9       	ldd	r25, Y+52	; 0x34
    193e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	98 ab       	std	Y+48, r25	; 0x30
    1948:	8f a7       	std	Y+47, r24	; 0x2f
    194a:	8f a5       	ldd	r24, Y+47	; 0x2f
    194c:	98 a9       	ldd	r25, Y+48	; 0x30
    194e:	9c a7       	std	Y+44, r25	; 0x2c
    1950:	8b a7       	std	Y+43, r24	; 0x2b
    1952:	8b a5       	ldd	r24, Y+43	; 0x2b
    1954:	9c a5       	ldd	r25, Y+44	; 0x2c
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <LCD_sendCommand+0x10e>
    195a:	9c a7       	std	Y+44, r25	; 0x2c
    195c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    195e:	a2 e3       	ldi	r26, 0x32	; 50
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e2 e3       	ldi	r30, 0x32	; 50
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	80 64       	ori	r24, 0x40	; 64
    196a:	8c 93       	st	X, r24
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a0 e8       	ldi	r26, 0x80	; 128
    1972:	bf e3       	ldi	r27, 0x3F	; 63
    1974:	8f a3       	std	Y+39, r24	; 0x27
    1976:	98 a7       	std	Y+40, r25	; 0x28
    1978:	a9 a7       	std	Y+41, r26	; 0x29
    197a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197c:	6f a1       	ldd	r22, Y+39	; 0x27
    197e:	78 a5       	ldd	r23, Y+40	; 0x28
    1980:	89 a5       	ldd	r24, Y+41	; 0x29
    1982:	9a a5       	ldd	r25, Y+42	; 0x2a
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	4a ef       	ldi	r20, 0xFA	; 250
    198a:	54 e4       	ldi	r21, 0x44	; 68
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	8b a3       	std	Y+35, r24	; 0x23
    1996:	9c a3       	std	Y+36, r25	; 0x24
    1998:	ad a3       	std	Y+37, r26	; 0x25
    199a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    199c:	6b a1       	ldd	r22, Y+35	; 0x23
    199e:	7c a1       	ldd	r23, Y+36	; 0x24
    19a0:	8d a1       	ldd	r24, Y+37	; 0x25
    19a2:	9e a1       	ldd	r25, Y+38	; 0x26
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e8       	ldi	r20, 0x80	; 128
    19aa:	5f e3       	ldi	r21, 0x3F	; 63
    19ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	2c f4       	brge	.+10     	; 0x19be <LCD_sendCommand+0x176>
		__ticks = 1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9a a3       	std	Y+34, r25	; 0x22
    19ba:	89 a3       	std	Y+33, r24	; 0x21
    19bc:	3f c0       	rjmp	.+126    	; 0x1a3c <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    19be:	6b a1       	ldd	r22, Y+35	; 0x23
    19c0:	7c a1       	ldd	r23, Y+36	; 0x24
    19c2:	8d a1       	ldd	r24, Y+37	; 0x25
    19c4:	9e a1       	ldd	r25, Y+38	; 0x26
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	3f ef       	ldi	r19, 0xFF	; 255
    19ca:	4f e7       	ldi	r20, 0x7F	; 127
    19cc:	57 e4       	ldi	r21, 0x47	; 71
    19ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d2:	18 16       	cp	r1, r24
    19d4:	4c f5       	brge	.+82     	; 0x1a28 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d6:	6f a1       	ldd	r22, Y+39	; 0x27
    19d8:	78 a5       	ldd	r23, Y+40	; 0x28
    19da:	89 a5       	ldd	r24, Y+41	; 0x29
    19dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e2       	ldi	r20, 0x20	; 32
    19e4:	51 e4       	ldi	r21, 0x41	; 65
    19e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	bc 01       	movw	r22, r24
    19f0:	cd 01       	movw	r24, r26
    19f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	9a a3       	std	Y+34, r25	; 0x22
    19fc:	89 a3       	std	Y+33, r24	; 0x21
    19fe:	0f c0       	rjmp	.+30     	; 0x1a1e <LCD_sendCommand+0x1d6>
    1a00:	88 ec       	ldi	r24, 0xC8	; 200
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	98 a3       	std	Y+32, r25	; 0x20
    1a06:	8f 8f       	std	Y+31, r24	; 0x1f
    1a08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a0a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_sendCommand+0x1c4>
    1a10:	98 a3       	std	Y+32, r25	; 0x20
    1a12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a14:	89 a1       	ldd	r24, Y+33	; 0x21
    1a16:	9a a1       	ldd	r25, Y+34	; 0x22
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	9a a3       	std	Y+34, r25	; 0x22
    1a1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a20:	9a a1       	ldd	r25, Y+34	; 0x22
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	69 f7       	brne	.-38     	; 0x1a00 <LCD_sendCommand+0x1b8>
    1a26:	14 c0       	rjmp	.+40     	; 0x1a50 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a28:	6b a1       	ldd	r22, Y+35	; 0x23
    1a2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9a a3       	std	Y+34, r25	; 0x22
    1a3a:	89 a3       	std	Y+33, r24	; 0x21
    1a3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a40:	9e 8f       	std	Y+30, r25	; 0x1e
    1a42:	8d 8f       	std	Y+29, r24	; 0x1d
    1a44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <LCD_sendCommand+0x200>
    1a4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a4e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1a50:	e5 e3       	ldi	r30, 0x35	; 53
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	89 ad       	ldd	r24, Y+57	; 0x39
    1a56:	80 83       	st	Z, r24
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a0 e8       	ldi	r26, 0x80	; 128
    1a5e:	bf e3       	ldi	r27, 0x3F	; 63
    1a60:	89 8f       	std	Y+25, r24	; 0x19
    1a62:	9a 8f       	std	Y+26, r25	; 0x1a
    1a64:	ab 8f       	std	Y+27, r26	; 0x1b
    1a66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a68:	69 8d       	ldd	r22, Y+25	; 0x19
    1a6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	4a ef       	ldi	r20, 0xFA	; 250
    1a76:	54 e4       	ldi	r21, 0x44	; 68
    1a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	8d 8b       	std	Y+21, r24	; 0x15
    1a82:	9e 8b       	std	Y+22, r25	; 0x16
    1a84:	af 8b       	std	Y+23, r26	; 0x17
    1a86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a88:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e8       	ldi	r20, 0x80	; 128
    1a96:	5f e3       	ldi	r21, 0x3F	; 63
    1a98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	2c f4       	brge	.+10     	; 0x1aaa <LCD_sendCommand+0x262>
		__ticks = 1;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9c 8b       	std	Y+20, r25	; 0x14
    1aa6:	8b 8b       	std	Y+19, r24	; 0x13
    1aa8:	3f c0       	rjmp	.+126    	; 0x1b28 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    1aac:	7e 89       	ldd	r23, Y+22	; 0x16
    1aae:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	3f ef       	ldi	r19, 0xFF	; 255
    1ab6:	4f e7       	ldi	r20, 0x7F	; 127
    1ab8:	57 e4       	ldi	r21, 0x47	; 71
    1aba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abe:	18 16       	cp	r1, r24
    1ac0:	4c f5       	brge	.+82     	; 0x1b14 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e2       	ldi	r20, 0x20	; 32
    1ad0:	51 e4       	ldi	r21, 0x41	; 65
    1ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9c 8b       	std	Y+20, r25	; 0x14
    1ae8:	8b 8b       	std	Y+19, r24	; 0x13
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <LCD_sendCommand+0x2c2>
    1aec:	88 ec       	ldi	r24, 0xC8	; 200
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9a 8b       	std	Y+18, r25	; 0x12
    1af2:	89 8b       	std	Y+17, r24	; 0x11
    1af4:	89 89       	ldd	r24, Y+17	; 0x11
    1af6:	9a 89       	ldd	r25, Y+18	; 0x12
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <LCD_sendCommand+0x2b0>
    1afc:	9a 8b       	std	Y+18, r25	; 0x12
    1afe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b00:	8b 89       	ldd	r24, Y+19	; 0x13
    1b02:	9c 89       	ldd	r25, Y+20	; 0x14
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	9c 8b       	std	Y+20, r25	; 0x14
    1b08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	69 f7       	brne	.-38     	; 0x1aec <LCD_sendCommand+0x2a4>
    1b12:	14 c0       	rjmp	.+40     	; 0x1b3c <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	6d 89       	ldd	r22, Y+21	; 0x15
    1b16:	7e 89       	ldd	r23, Y+22	; 0x16
    1b18:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9c 8b       	std	Y+20, r25	; 0x14
    1b26:	8b 8b       	std	Y+19, r24	; 0x13
    1b28:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2c:	98 8b       	std	Y+16, r25	; 0x10
    1b2e:	8f 87       	std	Y+15, r24	; 0x0f
    1b30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b32:	98 89       	ldd	r25, Y+16	; 0x10
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <LCD_sendCommand+0x2ec>
    1b38:	98 8b       	std	Y+16, r25	; 0x10
    1b3a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1b3c:	a2 e3       	ldi	r26, 0x32	; 50
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e2 e3       	ldi	r30, 0x32	; 50
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8f 7b       	andi	r24, 0xBF	; 191
    1b48:	8c 93       	st	X, r24
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	a0 e8       	ldi	r26, 0x80	; 128
    1b50:	bf e3       	ldi	r27, 0x3F	; 63
    1b52:	8b 87       	std	Y+11, r24	; 0x0b
    1b54:	9c 87       	std	Y+12, r25	; 0x0c
    1b56:	ad 87       	std	Y+13, r26	; 0x0d
    1b58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	4a ef       	ldi	r20, 0xFA	; 250
    1b68:	54 e4       	ldi	r21, 0x44	; 68
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	8f 83       	std	Y+7, r24	; 0x07
    1b74:	98 87       	std	Y+8, r25	; 0x08
    1b76:	a9 87       	std	Y+9, r26	; 0x09
    1b78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7c:	78 85       	ldd	r23, Y+8	; 0x08
    1b7e:	89 85       	ldd	r24, Y+9	; 0x09
    1b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e8       	ldi	r20, 0x80	; 128
    1b88:	5f e3       	ldi	r21, 0x3F	; 63
    1b8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b8e:	88 23       	and	r24, r24
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <LCD_sendCommand+0x354>
		__ticks = 1;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
    1b9a:	3f c0       	rjmp	.+126    	; 0x1c1a <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ba0:	89 85       	ldd	r24, Y+9	; 0x09
    1ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	3f ef       	ldi	r19, 0xFF	; 255
    1ba8:	4f e7       	ldi	r20, 0x7F	; 127
    1baa:	57 e4       	ldi	r21, 0x47	; 71
    1bac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb0:	18 16       	cp	r1, r24
    1bb2:	4c f5       	brge	.+82     	; 0x1c06 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e2       	ldi	r20, 0x20	; 32
    1bc2:	51 e4       	ldi	r21, 0x41	; 65
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9e 83       	std	Y+6, r25	; 0x06
    1bda:	8d 83       	std	Y+5, r24	; 0x05
    1bdc:	0f c0       	rjmp	.+30     	; 0x1bfc <LCD_sendCommand+0x3b4>
    1bde:	88 ec       	ldi	r24, 0xC8	; 200
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9c 83       	std	Y+4, r25	; 0x04
    1be4:	8b 83       	std	Y+3, r24	; 0x03
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <LCD_sendCommand+0x3a2>
    1bee:	9c 83       	std	Y+4, r25	; 0x04
    1bf0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	69 f7       	brne	.-38     	; 0x1bde <LCD_sendCommand+0x396>
    1c04:	14 c0       	rjmp	.+40     	; 0x1c2e <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c06:	6f 81       	ldd	r22, Y+7	; 0x07
    1c08:	78 85       	ldd	r23, Y+8	; 0x08
    1c0a:	89 85       	ldd	r24, Y+9	; 0x09
    1c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	9e 83       	std	Y+6, r25	; 0x06
    1c18:	8d 83       	std	Y+5, r24	; 0x05
    1c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1e:	9a 83       	std	Y+2, r25	; 0x02
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <LCD_sendCommand+0x3de>
    1c2a:	9a 83       	std	Y+2, r25	; 0x02
    1c2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1c2e:	e9 96       	adiw	r28, 0x39	; 57
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	e9 97       	sbiw	r28, 0x39	; 57
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1c56:	a2 e3       	ldi	r26, 0x32	; 50
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e2 e3       	ldi	r30, 0x32	; 50
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 61       	ori	r24, 0x10	; 16
    1c62:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1c64:	a2 e3       	ldi	r26, 0x32	; 50
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e2 e3       	ldi	r30, 0x32	; 50
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8f 7d       	andi	r24, 0xDF	; 223
    1c70:	8c 93       	st	X, r24
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a0 e8       	ldi	r26, 0x80	; 128
    1c78:	bf e3       	ldi	r27, 0x3F	; 63
    1c7a:	8d ab       	std	Y+53, r24	; 0x35
    1c7c:	9e ab       	std	Y+54, r25	; 0x36
    1c7e:	af ab       	std	Y+55, r26	; 0x37
    1c80:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c82:	6d a9       	ldd	r22, Y+53	; 0x35
    1c84:	7e a9       	ldd	r23, Y+54	; 0x36
    1c86:	8f a9       	ldd	r24, Y+55	; 0x37
    1c88:	98 ad       	ldd	r25, Y+56	; 0x38
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	4a ef       	ldi	r20, 0xFA	; 250
    1c90:	54 e4       	ldi	r21, 0x44	; 68
    1c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	89 ab       	std	Y+49, r24	; 0x31
    1c9c:	9a ab       	std	Y+50, r25	; 0x32
    1c9e:	ab ab       	std	Y+51, r26	; 0x33
    1ca0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ca2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca8:	9c a9       	ldd	r25, Y+52	; 0x34
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e8       	ldi	r20, 0x80	; 128
    1cb0:	5f e3       	ldi	r21, 0x3F	; 63
    1cb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb6:	88 23       	and	r24, r24
    1cb8:	2c f4       	brge	.+10     	; 0x1cc4 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	98 ab       	std	Y+48, r25	; 0x30
    1cc0:	8f a7       	std	Y+47, r24	; 0x2f
    1cc2:	3f c0       	rjmp	.+126    	; 0x1d42 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1cc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1cca:	9c a9       	ldd	r25, Y+52	; 0x34
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	3f ef       	ldi	r19, 0xFF	; 255
    1cd0:	4f e7       	ldi	r20, 0x7F	; 127
    1cd2:	57 e4       	ldi	r21, 0x47	; 71
    1cd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd8:	18 16       	cp	r1, r24
    1cda:	4c f5       	brge	.+82     	; 0x1d2e <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cdc:	6d a9       	ldd	r22, Y+53	; 0x35
    1cde:	7e a9       	ldd	r23, Y+54	; 0x36
    1ce0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ce2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e2       	ldi	r20, 0x20	; 32
    1cea:	51 e4       	ldi	r21, 0x41	; 65
    1cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	98 ab       	std	Y+48, r25	; 0x30
    1d02:	8f a7       	std	Y+47, r24	; 0x2f
    1d04:	0f c0       	rjmp	.+30     	; 0x1d24 <LCD_displayCharacter+0xe4>
    1d06:	88 ec       	ldi	r24, 0xC8	; 200
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9e a7       	std	Y+46, r25	; 0x2e
    1d0c:	8d a7       	std	Y+45, r24	; 0x2d
    1d0e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d10:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <LCD_displayCharacter+0xd2>
    1d16:	9e a7       	std	Y+46, r25	; 0x2e
    1d18:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	98 ab       	std	Y+48, r25	; 0x30
    1d22:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d26:	98 a9       	ldd	r25, Y+48	; 0x30
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	69 f7       	brne	.-38     	; 0x1d06 <LCD_displayCharacter+0xc6>
    1d2c:	14 c0       	rjmp	.+40     	; 0x1d56 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d30:	7a a9       	ldd	r23, Y+50	; 0x32
    1d32:	8b a9       	ldd	r24, Y+51	; 0x33
    1d34:	9c a9       	ldd	r25, Y+52	; 0x34
    1d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	98 ab       	std	Y+48, r25	; 0x30
    1d40:	8f a7       	std	Y+47, r24	; 0x2f
    1d42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d44:	98 a9       	ldd	r25, Y+48	; 0x30
    1d46:	9c a7       	std	Y+44, r25	; 0x2c
    1d48:	8b a7       	std	Y+43, r24	; 0x2b
    1d4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_displayCharacter+0x10e>
    1d52:	9c a7       	std	Y+44, r25	; 0x2c
    1d54:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1d56:	a2 e3       	ldi	r26, 0x32	; 50
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e2 e3       	ldi	r30, 0x32	; 50
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	80 64       	ori	r24, 0x40	; 64
    1d62:	8c 93       	st	X, r24
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 e8       	ldi	r26, 0x80	; 128
    1d6a:	bf e3       	ldi	r27, 0x3F	; 63
    1d6c:	8f a3       	std	Y+39, r24	; 0x27
    1d6e:	98 a7       	std	Y+40, r25	; 0x28
    1d70:	a9 a7       	std	Y+41, r26	; 0x29
    1d72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	6f a1       	ldd	r22, Y+39	; 0x27
    1d76:	78 a5       	ldd	r23, Y+40	; 0x28
    1d78:	89 a5       	ldd	r24, Y+41	; 0x29
    1d7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	4a ef       	ldi	r20, 0xFA	; 250
    1d82:	54 e4       	ldi	r21, 0x44	; 68
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	8b a3       	std	Y+35, r24	; 0x23
    1d8e:	9c a3       	std	Y+36, r25	; 0x24
    1d90:	ad a3       	std	Y+37, r26	; 0x25
    1d92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d94:	6b a1       	ldd	r22, Y+35	; 0x23
    1d96:	7c a1       	ldd	r23, Y+36	; 0x24
    1d98:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e8       	ldi	r20, 0x80	; 128
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9a a3       	std	Y+34, r25	; 0x22
    1db2:	89 a3       	std	Y+33, r24	; 0x21
    1db4:	3f c0       	rjmp	.+126    	; 0x1e34 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1db6:	6b a1       	ldd	r22, Y+35	; 0x23
    1db8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dba:	8d a1       	ldd	r24, Y+37	; 0x25
    1dbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	4c f5       	brge	.+82     	; 0x1e20 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dce:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd0:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e2       	ldi	r20, 0x20	; 32
    1ddc:	51 e4       	ldi	r21, 0x41	; 65
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9a a3       	std	Y+34, r25	; 0x22
    1df4:	89 a3       	std	Y+33, r24	; 0x21
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <LCD_displayCharacter+0x1d6>
    1df8:	88 ec       	ldi	r24, 0xC8	; 200
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	98 a3       	std	Y+32, r25	; 0x20
    1dfe:	8f 8f       	std	Y+31, r24	; 0x1f
    1e00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e02:	98 a1       	ldd	r25, Y+32	; 0x20
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <LCD_displayCharacter+0x1c4>
    1e08:	98 a3       	std	Y+32, r25	; 0x20
    1e0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	9a a3       	std	Y+34, r25	; 0x22
    1e14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e16:	89 a1       	ldd	r24, Y+33	; 0x21
    1e18:	9a a1       	ldd	r25, Y+34	; 0x22
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	69 f7       	brne	.-38     	; 0x1df8 <LCD_displayCharacter+0x1b8>
    1e1e:	14 c0       	rjmp	.+40     	; 0x1e48 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e20:	6b a1       	ldd	r22, Y+35	; 0x23
    1e22:	7c a1       	ldd	r23, Y+36	; 0x24
    1e24:	8d a1       	ldd	r24, Y+37	; 0x25
    1e26:	9e a1       	ldd	r25, Y+38	; 0x26
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9a a3       	std	Y+34, r25	; 0x22
    1e32:	89 a3       	std	Y+33, r24	; 0x21
    1e34:	89 a1       	ldd	r24, Y+33	; 0x21
    1e36:	9a a1       	ldd	r25, Y+34	; 0x22
    1e38:	9e 8f       	std	Y+30, r25	; 0x1e
    1e3a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_displayCharacter+0x200>
    1e44:	9e 8f       	std	Y+30, r25	; 0x1e
    1e46:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1e48:	e5 e3       	ldi	r30, 0x35	; 53
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e4e:	80 83       	st	Z, r24
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e8       	ldi	r26, 0x80	; 128
    1e56:	bf e3       	ldi	r27, 0x3F	; 63
    1e58:	89 8f       	std	Y+25, r24	; 0x19
    1e5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e60:	69 8d       	ldd	r22, Y+25	; 0x19
    1e62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a ef       	ldi	r20, 0xFA	; 250
    1e6e:	54 e4       	ldi	r21, 0x44	; 68
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	8d 8b       	std	Y+21, r24	; 0x15
    1e7a:	9e 8b       	std	Y+22, r25	; 0x16
    1e7c:	af 8b       	std	Y+23, r26	; 0x17
    1e7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e80:	6d 89       	ldd	r22, Y+21	; 0x15
    1e82:	7e 89       	ldd	r23, Y+22	; 0x16
    1e84:	8f 89       	ldd	r24, Y+23	; 0x17
    1e86:	98 8d       	ldd	r25, Y+24	; 0x18
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e94:	88 23       	and	r24, r24
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9c 8b       	std	Y+20, r25	; 0x14
    1e9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ea0:	3f c0       	rjmp	.+126    	; 0x1f20 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	57 e4       	ldi	r21, 0x47	; 71
    1eb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	4c f5       	brge	.+82     	; 0x1f0c <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eba:	69 8d       	ldd	r22, Y+25	; 0x19
    1ebc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ebe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9c 8b       	std	Y+20, r25	; 0x14
    1ee0:	8b 8b       	std	Y+19, r24	; 0x13
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <LCD_displayCharacter+0x2c2>
    1ee4:	88 ec       	ldi	r24, 0xC8	; 200
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9a 8b       	std	Y+18, r25	; 0x12
    1eea:	89 8b       	std	Y+17, r24	; 0x11
    1eec:	89 89       	ldd	r24, Y+17	; 0x11
    1eee:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_displayCharacter+0x2b0>
    1ef4:	9a 8b       	std	Y+18, r25	; 0x12
    1ef6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    1efa:	9c 89       	ldd	r25, Y+20	; 0x14
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	9c 8b       	std	Y+20, r25	; 0x14
    1f00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f02:	8b 89       	ldd	r24, Y+19	; 0x13
    1f04:	9c 89       	ldd	r25, Y+20	; 0x14
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	69 f7       	brne	.-38     	; 0x1ee4 <LCD_displayCharacter+0x2a4>
    1f0a:	14 c0       	rjmp	.+40     	; 0x1f34 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f10:	8f 89       	ldd	r24, Y+23	; 0x17
    1f12:	98 8d       	ldd	r25, Y+24	; 0x18
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9c 8b       	std	Y+20, r25	; 0x14
    1f1e:	8b 8b       	std	Y+19, r24	; 0x13
    1f20:	8b 89       	ldd	r24, Y+19	; 0x13
    1f22:	9c 89       	ldd	r25, Y+20	; 0x14
    1f24:	98 8b       	std	Y+16, r25	; 0x10
    1f26:	8f 87       	std	Y+15, r24	; 0x0f
    1f28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f2a:	98 89       	ldd	r25, Y+16	; 0x10
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_displayCharacter+0x2ec>
    1f30:	98 8b       	std	Y+16, r25	; 0x10
    1f32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1f34:	a2 e3       	ldi	r26, 0x32	; 50
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e2 e3       	ldi	r30, 0x32	; 50
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8f 7b       	andi	r24, 0xBF	; 191
    1f40:	8c 93       	st	X, r24
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	a0 e8       	ldi	r26, 0x80	; 128
    1f48:	bf e3       	ldi	r27, 0x3F	; 63
    1f4a:	8b 87       	std	Y+11, r24	; 0x0b
    1f4c:	9c 87       	std	Y+12, r25	; 0x0c
    1f4e:	ad 87       	std	Y+13, r26	; 0x0d
    1f50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	4a ef       	ldi	r20, 0xFA	; 250
    1f60:	54 e4       	ldi	r21, 0x44	; 68
    1f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	8f 83       	std	Y+7, r24	; 0x07
    1f6c:	98 87       	std	Y+8, r25	; 0x08
    1f6e:	a9 87       	std	Y+9, r26	; 0x09
    1f70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f72:	6f 81       	ldd	r22, Y+7	; 0x07
    1f74:	78 85       	ldd	r23, Y+8	; 0x08
    1f76:	89 85       	ldd	r24, Y+9	; 0x09
    1f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e8       	ldi	r20, 0x80	; 128
    1f80:	5f e3       	ldi	r21, 0x3F	; 63
    1f82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f86:	88 23       	and	r24, r24
    1f88:	2c f4       	brge	.+10     	; 0x1f94 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	9e 83       	std	Y+6, r25	; 0x06
    1f90:	8d 83       	std	Y+5, r24	; 0x05
    1f92:	3f c0       	rjmp	.+126    	; 0x2012 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1f94:	6f 81       	ldd	r22, Y+7	; 0x07
    1f96:	78 85       	ldd	r23, Y+8	; 0x08
    1f98:	89 85       	ldd	r24, Y+9	; 0x09
    1f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	3f ef       	ldi	r19, 0xFF	; 255
    1fa0:	4f e7       	ldi	r20, 0x7F	; 127
    1fa2:	57 e4       	ldi	r21, 0x47	; 71
    1fa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa8:	18 16       	cp	r1, r24
    1faa:	4c f5       	brge	.+82     	; 0x1ffe <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e2       	ldi	r20, 0x20	; 32
    1fba:	51 e4       	ldi	r21, 0x41	; 65
    1fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	9e 83       	std	Y+6, r25	; 0x06
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
    1fd4:	0f c0       	rjmp	.+30     	; 0x1ff4 <LCD_displayCharacter+0x3b4>
    1fd6:	88 ec       	ldi	r24, 0xC8	; 200
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9c 83       	std	Y+4, r25	; 0x04
    1fdc:	8b 83       	std	Y+3, r24	; 0x03
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <LCD_displayCharacter+0x3a2>
    1fe6:	9c 83       	std	Y+4, r25	; 0x04
    1fe8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	69 f7       	brne	.-38     	; 0x1fd6 <LCD_displayCharacter+0x396>
    1ffc:	14 c0       	rjmp	.+40     	; 0x2026 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    2000:	78 85       	ldd	r23, Y+8	; 0x08
    2002:	89 85       	ldd	r24, Y+9	; 0x09
    2004:	9a 85       	ldd	r25, Y+10	; 0x0a
    2006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	9e 81       	ldd	r25, Y+6	; 0x06
    2016:	9a 83       	std	Y+2, r25	; 0x02
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	9a 81       	ldd	r25, Y+2	; 0x02
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <LCD_displayCharacter+0x3de>
    2022:	9a 83       	std	Y+2, r25	; 0x02
    2024:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    2026:	e9 96       	adiw	r28, 0x39	; 57
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	00 d0       	rcall	.+0      	; 0x203e <LCD_displayString+0x6>
    203e:	0f 92       	push	r0
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	9b 83       	std	Y+3, r25	; 0x03
    2046:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2048:	19 82       	std	Y+1, r1	; 0x01
    204a:	0e c0       	rjmp	.+28     	; 0x2068 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	9b 81       	ldd	r25, Y+3	; 0x03
    2056:	fc 01       	movw	r30, r24
    2058:	e2 0f       	add	r30, r18
    205a:	f3 1f       	adc	r31, r19
    205c:	80 81       	ld	r24, Z
    205e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_displayCharacter>
		i++;
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	8f 5f       	subi	r24, 0xFF	; 255
    2066:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	9b 81       	ldd	r25, Y+3	; 0x03
    2072:	fc 01       	movw	r30, r24
    2074:	e2 0f       	add	r30, r18
    2076:	f3 1f       	adc	r31, r19
    2078:	80 81       	ld	r24, Z
    207a:	88 23       	and	r24, r24
    207c:	39 f7       	brne	.-50     	; 0x204c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <LCD_goToRowColumn+0x6>
    2090:	00 d0       	rcall	.+0      	; 0x2092 <LCD_goToRowColumn+0x8>
    2092:	0f 92       	push	r0
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	8a 83       	std	Y+2, r24	; 0x02
    209a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	3d 83       	std	Y+5, r19	; 0x05
    20a4:	2c 83       	std	Y+4, r18	; 0x04
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	9d 81       	ldd	r25, Y+5	; 0x05
    20aa:	81 30       	cpi	r24, 0x01	; 1
    20ac:	91 05       	cpc	r25, r1
    20ae:	c1 f0       	breq	.+48     	; 0x20e0 <LCD_goToRowColumn+0x56>
    20b0:	2c 81       	ldd	r18, Y+4	; 0x04
    20b2:	3d 81       	ldd	r19, Y+5	; 0x05
    20b4:	22 30       	cpi	r18, 0x02	; 2
    20b6:	31 05       	cpc	r19, r1
    20b8:	2c f4       	brge	.+10     	; 0x20c4 <LCD_goToRowColumn+0x3a>
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	9d 81       	ldd	r25, Y+5	; 0x05
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	61 f0       	breq	.+24     	; 0x20da <LCD_goToRowColumn+0x50>
    20c2:	19 c0       	rjmp	.+50     	; 0x20f6 <LCD_goToRowColumn+0x6c>
    20c4:	2c 81       	ldd	r18, Y+4	; 0x04
    20c6:	3d 81       	ldd	r19, Y+5	; 0x05
    20c8:	22 30       	cpi	r18, 0x02	; 2
    20ca:	31 05       	cpc	r19, r1
    20cc:	69 f0       	breq	.+26     	; 0x20e8 <LCD_goToRowColumn+0x5e>
    20ce:	8c 81       	ldd	r24, Y+4	; 0x04
    20d0:	9d 81       	ldd	r25, Y+5	; 0x05
    20d2:	83 30       	cpi	r24, 0x03	; 3
    20d4:	91 05       	cpc	r25, r1
    20d6:	61 f0       	breq	.+24     	; 0x20f0 <LCD_goToRowColumn+0x66>
    20d8:	0e c0       	rjmp	.+28     	; 0x20f6 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	0b c0       	rjmp	.+22     	; 0x20f6 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	80 5c       	subi	r24, 0xC0	; 192
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	07 c0       	rjmp	.+14     	; 0x20f6 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	80 5f       	subi	r24, 0xF0	; 240
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	03 c0       	rjmp	.+6      	; 0x20f6 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	80 5b       	subi	r24, 0xB0	; 176
    20f4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	80 68       	ori	r24, 0x80	; 128
    20fa:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_sendCommand>
}
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <LCD_displayStringRowColumn+0x6>
    2114:	00 d0       	rcall	.+0      	; 0x2116 <LCD_displayStringRowColumn+0x8>
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	6a 83       	std	Y+2, r22	; 0x02
    211e:	5c 83       	std	Y+4, r21	; 0x04
    2120:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	6a 81       	ldd	r22, Y+2	; 0x02
    2126:	0e 94 45 10 	call	0x208a	; 0x208a <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_displayString>
}
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <LCD_intgerToString>:

void LCD_intgerToString(int32 data)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	62 97       	sbiw	r28, 0x12	; 18
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	de bf       	out	0x3e, r29	; 62
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	cd bf       	out	0x3d, r28	; 61
    2154:	9a 8b       	std	Y+18, r25	; 0x12
    2156:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2158:	89 89       	ldd	r24, Y+17	; 0x11
    215a:	9a 89       	ldd	r25, Y+18	; 0x12
    215c:	9e 01       	movw	r18, r28
    215e:	2f 5f       	subi	r18, 0xFF	; 255
    2160:	3f 4f       	sbci	r19, 0xFF	; 255
    2162:	b9 01       	movw	r22, r18
    2164:	4a e0       	ldi	r20, 0x0A	; 10
    2166:	50 e0       	ldi	r21, 0x00	; 0
    2168:	0e 94 2c 11 	call	0x2258	; 0x2258 <itoa>
   LCD_displayString(buff);
    216c:	ce 01       	movw	r24, r28
    216e:	01 96       	adiw	r24, 0x01	; 1
    2170:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_displayString>
}
    2174:	62 96       	adiw	r28, 0x12	; 18
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	0e 94 24 0c 	call	0x1848	; 0x1848 <LCD_sendCommand>
}
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <main>:

#include "ADC.h"
#include "lcd.h"
#include <util/delay.h>
int main(void)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <main+0x6>
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
	uint16 res_value;
	LCD_init(); /* initialize LCD driver */
    21a4:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_init>
	ADC_Init(); /* initialize ADC driver */
    21a8:	0e 94 c3 05 	call	0xb86	; 0xb86 <ADC_Init>
	LCD_clearScreen(); /* clear LCD at the beginning */
    21ac:	0e 94 c3 10 	call	0x2186	; 0x2186 <LCD_clearScreen>
	/* display this string "ADC Value = " only once at LCD */
	LCD_displayString("ADC Value = ");
    21b0:	80 e6       	ldi	r24, 0x60	; 96
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_displayString>
	ADC_SelectChannel(ADC0);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	0e 94 29 09 	call	0x1252	; 0x1252 <ADC_SelectChannel>
	SET_BIT(SREG,I);
    21be:	af e5       	ldi	r26, 0x5F	; 95
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	ef e5       	ldi	r30, 0x5F	; 95
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	80 68       	ori	r24, 0x80	; 128
    21ca:	8c 93       	st	X, r24
	ADC_StartConversion();
    21cc:	0e 94 3d 09 	call	0x127a	; 0x127a <ADC_StartConversion>
    while(1)
    {
		LCD_goToRowColumn(0,12); /* display the number every time at this position */
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	6c e0       	ldi	r22, 0x0C	; 12
    21d4:	0e 94 45 10 	call	0x208a	; 0x208a <LCD_goToRowColumn>
		res_value = ADC_ReadChannel(); /* read channel zero where the potentiometer is connect */
    21d8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <ADC_ReadChannel>
    21dc:	9a 83       	std	Y+2, r25	; 0x02
    21de:	89 83       	std	Y+1, r24	; 0x01
		LCD_intgerToString(res_value); /* display the ADC value on LCD screen */
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	9a 81       	ldd	r25, Y+2	; 0x02
    21e4:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_intgerToString>
    21e8:	f3 cf       	rjmp	.-26     	; 0x21d0 <main+0x36>

000021ea <__prologue_saves__>:
    21ea:	2f 92       	push	r2
    21ec:	3f 92       	push	r3
    21ee:	4f 92       	push	r4
    21f0:	5f 92       	push	r5
    21f2:	6f 92       	push	r6
    21f4:	7f 92       	push	r7
    21f6:	8f 92       	push	r8
    21f8:	9f 92       	push	r9
    21fa:	af 92       	push	r10
    21fc:	bf 92       	push	r11
    21fe:	cf 92       	push	r12
    2200:	df 92       	push	r13
    2202:	ef 92       	push	r14
    2204:	ff 92       	push	r15
    2206:	0f 93       	push	r16
    2208:	1f 93       	push	r17
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	ca 1b       	sub	r28, r26
    2214:	db 0b       	sbc	r29, r27
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	09 94       	ijmp

00002222 <__epilogue_restores__>:
    2222:	2a 88       	ldd	r2, Y+18	; 0x12
    2224:	39 88       	ldd	r3, Y+17	; 0x11
    2226:	48 88       	ldd	r4, Y+16	; 0x10
    2228:	5f 84       	ldd	r5, Y+15	; 0x0f
    222a:	6e 84       	ldd	r6, Y+14	; 0x0e
    222c:	7d 84       	ldd	r7, Y+13	; 0x0d
    222e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2230:	9b 84       	ldd	r9, Y+11	; 0x0b
    2232:	aa 84       	ldd	r10, Y+10	; 0x0a
    2234:	b9 84       	ldd	r11, Y+9	; 0x09
    2236:	c8 84       	ldd	r12, Y+8	; 0x08
    2238:	df 80       	ldd	r13, Y+7	; 0x07
    223a:	ee 80       	ldd	r14, Y+6	; 0x06
    223c:	fd 80       	ldd	r15, Y+5	; 0x05
    223e:	0c 81       	ldd	r16, Y+4	; 0x04
    2240:	1b 81       	ldd	r17, Y+3	; 0x03
    2242:	aa 81       	ldd	r26, Y+2	; 0x02
    2244:	b9 81       	ldd	r27, Y+1	; 0x01
    2246:	ce 0f       	add	r28, r30
    2248:	d1 1d       	adc	r29, r1
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	ed 01       	movw	r28, r26
    2256:	08 95       	ret

00002258 <itoa>:
    2258:	fb 01       	movw	r30, r22
    225a:	9f 01       	movw	r18, r30
    225c:	e8 94       	clt
    225e:	42 30       	cpi	r20, 0x02	; 2
    2260:	c4 f0       	brlt	.+48     	; 0x2292 <itoa+0x3a>
    2262:	45 32       	cpi	r20, 0x25	; 37
    2264:	b4 f4       	brge	.+44     	; 0x2292 <itoa+0x3a>
    2266:	4a 30       	cpi	r20, 0x0A	; 10
    2268:	29 f4       	brne	.+10     	; 0x2274 <itoa+0x1c>
    226a:	97 fb       	bst	r25, 7
    226c:	1e f4       	brtc	.+6      	; 0x2274 <itoa+0x1c>
    226e:	90 95       	com	r25
    2270:	81 95       	neg	r24
    2272:	9f 4f       	sbci	r25, 0xFF	; 255
    2274:	64 2f       	mov	r22, r20
    2276:	77 27       	eor	r23, r23
    2278:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__udivmodhi4>
    227c:	80 5d       	subi	r24, 0xD0	; 208
    227e:	8a 33       	cpi	r24, 0x3A	; 58
    2280:	0c f0       	brlt	.+2      	; 0x2284 <itoa+0x2c>
    2282:	89 5d       	subi	r24, 0xD9	; 217
    2284:	81 93       	st	Z+, r24
    2286:	cb 01       	movw	r24, r22
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	a1 f7       	brne	.-24     	; 0x2274 <itoa+0x1c>
    228c:	16 f4       	brtc	.+4      	; 0x2292 <itoa+0x3a>
    228e:	5d e2       	ldi	r21, 0x2D	; 45
    2290:	51 93       	st	Z+, r21
    2292:	10 82       	st	Z, r1
    2294:	c9 01       	movw	r24, r18
    2296:	0c 94 4d 11 	jmp	0x229a	; 0x229a <strrev>

0000229a <strrev>:
    229a:	dc 01       	movw	r26, r24
    229c:	fc 01       	movw	r30, r24
    229e:	67 2f       	mov	r22, r23
    22a0:	71 91       	ld	r23, Z+
    22a2:	77 23       	and	r23, r23
    22a4:	e1 f7       	brne	.-8      	; 0x229e <strrev+0x4>
    22a6:	32 97       	sbiw	r30, 0x02	; 2
    22a8:	04 c0       	rjmp	.+8      	; 0x22b2 <strrev+0x18>
    22aa:	7c 91       	ld	r23, X
    22ac:	6d 93       	st	X+, r22
    22ae:	70 83       	st	Z, r23
    22b0:	62 91       	ld	r22, -Z
    22b2:	ae 17       	cp	r26, r30
    22b4:	bf 07       	cpc	r27, r31
    22b6:	c8 f3       	brcs	.-14     	; 0x22aa <strrev+0x10>
    22b8:	08 95       	ret

000022ba <__udivmodhi4>:
    22ba:	aa 1b       	sub	r26, r26
    22bc:	bb 1b       	sub	r27, r27
    22be:	51 e1       	ldi	r21, 0x11	; 17
    22c0:	07 c0       	rjmp	.+14     	; 0x22d0 <__udivmodhi4_ep>

000022c2 <__udivmodhi4_loop>:
    22c2:	aa 1f       	adc	r26, r26
    22c4:	bb 1f       	adc	r27, r27
    22c6:	a6 17       	cp	r26, r22
    22c8:	b7 07       	cpc	r27, r23
    22ca:	10 f0       	brcs	.+4      	; 0x22d0 <__udivmodhi4_ep>
    22cc:	a6 1b       	sub	r26, r22
    22ce:	b7 0b       	sbc	r27, r23

000022d0 <__udivmodhi4_ep>:
    22d0:	88 1f       	adc	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	5a 95       	dec	r21
    22d6:	a9 f7       	brne	.-22     	; 0x22c2 <__udivmodhi4_loop>
    22d8:	80 95       	com	r24
    22da:	90 95       	com	r25
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	08 95       	ret

000022e2 <_exit>:
    22e2:	f8 94       	cli

000022e4 <__stop_program>:
    22e4:	ff cf       	rjmp	.-2      	; 0x22e4 <__stop_program>
